;;; Compiled snippets and support files for `csharp-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'csharp-mode
                     '(("wh" "while (${1:true})\n{\n  ${0:`yas-selected-text`}\n}" "wh" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/wh" nil nil)
                       ("usi" "using (${1:resource})\n{\n  $0\n}" "usi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/usi" nil nil)
                       ("tryf" "try\n{\n  ${0:`yas-selected-text`}\n}\nfinally\n{\n  $1\n}" "tryf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/tryf" nil nil)
                       ("try" "try\n{\n  ${0:`yas-selected-text`}\n}\ncatch (${1:System.Exception})\n{\n  throw;\n}" "try" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/try" nil nil)
                       ("t" "$1 ? $2 : $0" "t" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/t" nil nil)
                       ("switch" "switch (${1:switch_on})\n{\n  $0\n  default:\n}" "switch" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/switch" nil nil)
                       ("svm" "${1:public} static void Main(string[] args)\n{\n  $0\n}" "svm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/svm" nil nil)
                       ("struct" "public struct ${1:}\n{\n  $0\n}" "struct" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/struct" nil nil)
                       ("simc" "public class Application\n{\n  ${1:public} static int Main(string[] args)\n  {\n  	$0\n  	return 0;\n  }\n}" "simc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/simc" nil nil)
                       ("sim" "${1:public} static int Main(string[] args)\n{\n  $0\n  return 0;\n}" "sim" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/sim" nil nil)
                       ("ps|-" "protected string $1 { get; private set; }" "ps|-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps_-" nil nil)
                       ("ps|" "protected string $1 { get; set; }" "ps|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps_" nil nil)
                       ("ps-" "private string $1 { get; set; }" "ps-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps-" nil nil)
                       ("ps+|" "public string $1 { get; protected set; }" "ps+|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps+_" nil nil)
                       ("ps+-" "public string $1 { get; private set; }" "ps+-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps+-" nil nil)
                       ("ps+&" "public string $1 { get; internal set; }" "ps+&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps+&" nil nil)
                       ("ps+" "public string $1 { get; set; }" "ps+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps+" nil nil)
                       ("ps&|" "internal string $1 { get; protected set; }" "ps&|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps&_" nil nil)
                       ("ps&-" "internal string $1 { get; private set; }" "ps&-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps&-" nil nil)
                       ("ps&" "internal string $1 { get; set; }" "ps&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps&" nil nil)
                       ("ps" "${1:public} string $2 { get; set; }" "ps" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ps" nil nil)
                       ("propg" "public ${1:int} ${2:MyProperty} { get; private set; }" "propg" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/propg" nil nil)
                       ("propf" "private ${1:int} ${2:myVar};\npublic $1 ${3:MyProperty}\n{\n  get { return $2; }\n  set { $2 = value; }\n}" "propf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/propf" nil nil)
                       ("prop" "public ${1:int} ${2:MyProperty} { get; set; }" "prop" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/prop" nil nil)
                       ("pi|-" "protected int $1 { get; private set; }" "pi|-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi_-" nil nil)
                       ("pi|" "protected int $1 { get; set; }" "pi|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi_" nil nil)
                       ("pi-" "private int $1 { get; set; }" "pi-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi-" nil nil)
                       ("pi+|" "public int $1 { get; protected set; }" "pi+|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi+_" nil nil)
                       ("pi+-" "public int $1 { get; private set; }" "pi+-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi+-" nil nil)
                       ("pi+&" "public int $1 { get; internal set; }" "pi+&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi+&" nil nil)
                       ("pi+" "public int $1 { get; set; }" "pi+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi+" nil nil)
                       ("pi&|" "internal int $1 { get; protected set; }" "pi&|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi&_" nil nil)
                       ("pi&-" "internal int $1 { get; private set; }" "pi&-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi&-" nil nil)
                       ("pi&" "internal int $1 { get; set; }" "pi&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi&" nil nil)
                       ("pi" "${1:public} int $2 { get; set; }" "pi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pi" nil nil)
                       ("pb|-" "protected bool $1 { get; private set; }" "pb|-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb_-" nil nil)
                       ("pb|" "protected bool $1 { get; set; }" "pb|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb_" nil nil)
                       ("pb-" "private bool $1 { get; set; }" "pb-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb-" nil nil)
                       ("pb+|" "public bool $1 { get; protected set; }" "pb+|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb+_" nil nil)
                       ("pb+-" "public bool $1 { get; private set; }" "pb+-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb+-" nil nil)
                       ("pb+&" "public bool $1 { get; internal set; }" "pb+&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb+&" nil nil)
                       ("pb+" "public bool $1 { get; set; }" "pb+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb+" nil nil)
                       ("pb&|" "internal bool $1 { get; protected set; }" "pb&|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb&_" nil nil)
                       ("pb&-" "internal bool $1 { get; private set; }" "pb&-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb&-" nil nil)
                       ("pb&" "internal bool $1 { get; set; }" "pb&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb&" nil nil)
                       ("pb" "${1:public} bool $2 { get; set; }" "pb" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/pb" nil nil)
                       ("p|-" "protected ${1:int} $2 { get; private set; }" "p|-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p_-" nil nil)
                       ("p|" "protected ${1:int} $2 { get; set; }" "p|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p_" nil nil)
                       ("p-" "private ${1:int} $2 { get; set; }" "p-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p-" nil nil)
                       ("p+|" "public ${1:int} $2 { get; protected set; }" "p+|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p+_" nil nil)
                       ("p+-" "public ${1:int} $2 { get; private set; }" "p+-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p+-" nil nil)
                       ("p+&" "public ${1:int} $2 { get; internal set; }" "p+&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p+&" nil nil)
                       ("p+" "public ${1:int} $2 { get; set; }" "p+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p+" nil nil)
                       ("p&|" "internal ${1:int} $2 { get; protected set; }" "p&|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p&_" nil nil)
                       ("p&-" "internal ${1:int} $2 { get; private set; }" "p&-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p&-" nil nil)
                       ("p&" "internal ${1:int} $2 { get; set; }" "p&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p&" nil nil)
                       ("p" "${1:public} ${2:int} $3 { get; set; }" "p" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/p" nil nil)
                       ("namespace" "namespace ${1:MyNamespace}\n{\n  $0\n}" "namespace" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/namespace" nil nil)
                       ("ms|" "protected string ${1:}(${2:})\n{\n  ${0:return \"\";}\n}" "ms|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ms_" nil nil)
                       ("ms-" "private string $1($2)\n{\n  ${0:return \"\";}\n}" "ms-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ms-" nil nil)
                       ("ms+" "public string $1($2)\n{\n  ${0:return \"\";}\n}" "ms+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ms+" nil nil)
                       ("ms&" "internal string $1($2)\n{\n  ${0:return \"\";}\n}" "ms&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ms&" nil nil)
                       ("ms" "${1:public} string $2($3)\n{\n  ${0:return \"\";}\n}" "ms" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ms" nil nil)
                       ("mi|" "protected int $1($2)\n{\n  ${0:return 0;}\n}" "mi|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/mi_" nil nil)
                       ("mi-" "private int $1($2)\n{\n  ${0:return 0;}\n}" "mi-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/mi-" nil nil)
                       ("mi+" "public int $1($2)\n{\n  ${0:return 0;}\n}" "mi+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/mi+" nil nil)
                       ("mi&" "internal int $1($2)\n{\n  ${0:return 0;}\n}" "mi&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/mi&" nil nil)
                       ("mi" "${1:public} int $2($3)\n{\n  ${0:return 0;}\n}" "mi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/mi" nil nil)
                       ("mb|" "protected bool $1($2)\n{\n  ${0:return false;}\n}" "mb|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/mb_" nil nil)
                       ("mb-" "private bool $1($2)\n{\n  ${0:return false;}\n}" "mb-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/mb-" nil nil)
                       ("mb+" "public bool $1($2)\n{\n  ${0:return false;}\n}" "mb+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/mb+" nil nil)
                       ("mb&" "internal bool $1($2)\n{\n  ${0:return false;}\n}" "mb&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/mb&" nil nil)
                       ("mb" "${1:public} bool $2($3)\n{\n  ${0:return false;}\n}" "mb" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/mb" nil nil)
                       ("m|" "protected ${1:void} $2($3)\n{\n  $0\n}" "m|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/m_" nil nil)
                       ("m-" "private ${1:void} $2($3)\n{\n  $0\n}" "m-" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/m-" nil nil)
                       ("m+" "public ${1:void} $2($3)\n{\n  $0\n}" "m+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/m+" nil nil)
                       ("m&" "internal ${1:void} $2($3)\n{\n  $0\n}" "m&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/m&" nil nil)
                       ("m" "${1:public} ${2:void} $3($4)\n{\n  $0\n}" "m" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/m" nil nil)
                       ("lock" "lock (${1:this})\n{\n  $0\n}" "lock" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/lock" nil nil)
                       ("inv" "EventHandler temp = ${1:MyEvent};\nif (${2:temp} != null)\n{\n  $2();\n}" "inv" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/inv" nil nil)
                       ("interface" "public interface ${1:}\n{\n  $0\n}" "interface" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/interface" nil nil)
                       ("index" "public ${1:object} this[${2:int} index]\n{\n  get { $0 }\n  set { $0 }\n}" "index" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/index" nil nil)
                       ("ifs" "if ($1)\n  ${0:`yas-selected-text`}" "ifs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ifs" nil nil)
                       ("if+" "public interface ${1:}\n{\n  $0\n}" "if+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/if+" nil nil)
                       ("if" "if (${1:true})\n{\n  ${0:`yas-selected-text`}\n}" "if" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/if" nil nil)
                       ("forr" "for (int ${1:i} = ${2:length}; $1 >= 0; $1--)\n{\n  $0\n}" "forr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/forr" nil nil)
                       ("foreach" "foreach (${1:var} ${2:entry} in $3)\n{\n  $0\n}" "foreach" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/foreach" nil nil)
                       ("fore" "foreach (${1:var} ${2:entry} in $3)\n{\n  $0\n}" "fore" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/fore" nil nil)
                       ("for" "for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++})\n{\n  $0\n}" "for" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/for" nil nil)
                       ("exc" "public class ${1:MyException} : ${2:Exception}\n{\n  public $1() { }\n  public $1(string message) : base(message) { }\n  public $1(string message, Exception inner) : base(message, inner) { }\n  protected $1(\n  	System.Runtime.Serialization.SerializationInfo info,\n  	System.Runtime.Serialization.StreamingContext context)\n  		: base(info, context) { }\n}" "exc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/exc" nil nil)
                       ("eq" "public override bool Equals(object obj)\n{\n  if (obj == null || GetType() != obj.GetType())\n  {\n  	return false;\n  }\n  ${0:throw new NotImplementedException();}\n  return base.Equals(obj);\n}" "eq" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/eq" nil nil)
                       ("enum+" "public enum $1\n{\n  $0\n}" "enum+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/enum+" nil nil)
                       ("enum" "enum $1\n{\n  $0\n}\n" "enum" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/enum" nil nil)
                       ("el" "else\n{\n  ${0:`yas-selected-text`}\n}" "el" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/el" nil nil)
                       ("each" "foreach (${1:var} ${2:entry} in $3)\n{\n  $0\n}" "each" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/each" nil nil)
                       ("do" "do\n{\n  ${0:`yas-selected-text`}\n} while (${1:true});" "do" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/do" nil nil)
                       ("cw" "Console.WriteLine($1);\n" "cw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/cw" nil nil)
                       ("ctor" "public ${1:}()\n{\n  $0\n}" "ctor" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/ctor" nil nil)
                       ("cls|%" "protected abstract class ${1:}\n{\n  $0\n}" "cls|%" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/cls_%" nil nil)
                       ("cls|" "protected class ${1:}\n{\n  $0\n}" "cls|" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/cls_" nil nil)
                       ("cls+^" "public static class ${1:}\n{\n  $0\n}" "cls+^" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/cls+^" nil nil)
                       ("cls+" "public class ${1:}\n{\n  $0\n}" "cls+" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/cls+" nil nil)
                       ("cls&^" "internal static class ${1:}\n{\n  $0\n}" "cls&^" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/cls&^" nil nil)
                       ("cls&" "internal class ${1:}\n{\n  $0\n}" "cls&" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/cls&" nil nil)
                       ("cls" "${2:public} class ${1:}\n{\n  $0\n}" "cls" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/cls" nil nil)
                       ("class" "public class ${1:}\n{\n  $0\n}" "class" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/class" nil nil)
                       ("<s" "<see cref=\"$1\"/>" "<s" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/_s" nil nil)
                       ("<rem" "<remarks>$1</remarks>" "<rem" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/_rem" nil nil)
                       ("<r" "<returns>$1</returns>" "<r" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/_r" nil nil)
                       ("<p" "<param name=\"$1\">${2:$1}</param>" "<p" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/_p" nil nil)
                       ("<ex" "<exception cref=\"${1:System.Exception}\">$2</exception>" "<ex" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/_ex" nil nil)
                       ("<c" "<code>$1</code>\n" "<c" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/_c" nil nil)
                       ("///" "/// <summary>\n/// $0\n/// </summary>" "///" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/___" nil nil)
                       ("?" "$1 ? $2 : $0" "?" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/_" nil nil)
                       ("#if" "#if\n  $0\n#endif" "#if" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/csharp-mode/#if" nil nil)))


;;; Do not edit! File generated at Mon May  8 02:40:50 2017
