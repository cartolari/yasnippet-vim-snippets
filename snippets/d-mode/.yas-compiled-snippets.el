;;; Compiled snippets and support files for `d-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'd-mode
                     '(("with" "with(${1:exp}) {\n	$2\n} $0	" "with" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/with" nil nil)
                       ("wh" "while(${1:cond}) {\n	$0\n}" "wh" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/wh" nil nil)
                       ("ver" "version(${1:Posix}) {\n	$0\n}" "ver" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/ver" nil nil)
                       ("var" "${1:auto} ${2:var} = ${0:1};" "var" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/var" nil nil)
                       ("uni" "union${1:(T)} ${2:`(file-name-base)`} {\n	$0	\n}" "uni" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/uni" nil nil)
                       ("un" "unittest {\n	$0\n}" "un" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/un" nil nil)
                       ("try" "try {\n	$1\n} catch(${2:Exception} ${3:e}) {\n	$4\n}" "try" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/try" nil nil)
                       ("trusted" "@trusted" "trusted" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/trusted" nil nil)
                       ("traits" "std.traits" "traits" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/traits" nil nil)
                       ("tos" "to!string(${1:x});\n$0" "tos" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/tos" nil nil)
                       ("toi" "to!int(${1:str});\n$0" "toi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/toi" nil nil)
                       ("tod" "to!double(${1:str});\n$0" "tod" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/tod" nil nil)
                       ("theusual" "import std.stdio, std.string, std.array;\nimport std.traits, std.conv, std.algorithm;\nimport std.math, std.regex;" "theusual" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/theusual" nil nil)
                       ("tempif" "template ${1:`(file-name-base)`}(${2:T}) if(${3:isSomeString!}$2) {\n	$0	\n}" "tempif" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/tempif" nil nil)
                       ("temp" "template ${1:`(file-name-base)`}(${2:T}) {\n	$0\n}" "temp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/temp" nil nil)
                       ("td" "// Typedef is deprecated. Use alias instead.\ntypedef" "td" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/td" nil nil)
                       ("tcf" "try {\n	$0\n} catch(${1:Exception} ${2:e}) {\n	$3\n} finally {\n	$4\n}" "tcf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/tcf" nil nil)
                       ("system" "@system" "system" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/system" nil nil)
                       ("sw" "switch($1) {\n	$0\n}" "sw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/sw" nil nil)
                       ("str" "struct${1:(T)} ${2:`(file-name-base)`} {\n	$0	\n}" "str" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/str" nil nil)
                       ("sst" "shared static this($1) {\n	$0\n}" "sst" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/sst" nil nil)
                       ("sifee" "static if($1) {\n	$2\n} else static if($3) {\n	$4\n} else {\n	$5\n}" "sifee" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/sifee" nil nil)
                       ("sife" "static if($1) {\n	$2\n} else {\n	$3\n}" "sife" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/sife" nil nil)
                       ("sif" "static if(${1:cond}) {\n	$2\n}" "sif" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/sif" nil nil)
                       ("seif" "else static if($1) {\n	$2\n} " "seif" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/seif" nil nil)
                       ("scs" "scope(success) $1" "scs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/scs" nil nil)
                       ("scf" "scope(failure) $1" "scf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/scf" nil nil)
                       ("sce" "scope(exit) ${1:f.close();}" "sce" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/sce" nil nil)
                       ("safe" "@safe" "safe" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/safe" nil nil)
                       ("ret" "return $1;" "ret" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/ret" nil nil)
                       ("reduce" "reduce!(${1:f})(${2:xs});\n$0" "reduce" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/reduce" nil nil)
                       ("rdmd" "#!/usr/bin/env rdmd" "rdmd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/rdmd" nil nil)
                       ("pu" "public" "pu" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/pu" nil nil)
                       ("psn" "pure @safe nothrow" "psn" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/psn" nil nil)
                       ("psi" "private static immutable ${1:int} ${2:Constant} = ${3:1};\n$0" "psi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/psi" nil nil)
                       ("prag" "pragma($1)" "prag" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/prag" nil nil)
                       ("pr" "private" "pr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/pr" nil nil)
                       ("po" "protected" "po" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/po" nil nil)
                       ("pms" "pragma(msg, ${1:Warning});" "pms" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/pms" nil nil)
                       ("pimp" "public import" "pimp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/pimp" nil nil)
                       ("over" "override" "over" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/over" nil nil)
                       ("opApply" "int opApply(Dg)(Dg dg) if(ParameterTypeTuble!Dg.length == 2) {\n	$0\n}" "opApply" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/opApply" nil nil)
                       ("new" "${1:auto} ${2:var} = new ${3:Object}($4);\n$0" "new" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/new" nil nil)
                       ("mod" "module ${1:main};$0" "mod" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/mod" nil nil)
                       ("mixin" "mixin(${1:});" "mixin" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/mixin" nil nil)
                       ("map" "map!(${1:f})(${2:xs});\n$0" "map" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/map" nil nil)
                       ("maina" "void main(string[] args) {\n	$0\n}" "maina" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/maina" nil nil)
                       ("main" "void main() {\n	$0\n}" "main" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/main" nil nil)
                       ("l" "(${1:x}) => ${2:x}${0:;}" "l" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/l" nil nil)
                       ("isstr" "isSomeString!${1:S}" "isstr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/isstr" nil nil)
                       ("isnum" "isNumeric!${1:N}" "isnum" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/isnum" nil nil)
                       ("io" "std.stdio" "io" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/io" nil nil)
                       ("inter" "interface I${1:`(file-name-base)`} {\n	$0\n}" "inter" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/inter" nil nil)
                       ("ino" "inout" "ino" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/ino" nil nil)
                       ("imp" "import " "imp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/imp" nil nil)
                       ("imm" "immutable" "imm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/imm" nil nil)
                       ("ifee" "if($1) {\n	$2	\n} else if($3) {\n	$4\n} else {\n	$5\n}" "ifee" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/ifee" nil nil)
                       ("ife" "if($1) {\n	$2	\n} else {\n	$3	\n}" "ife" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/ife" nil nil)
                       ("if" "if($1) {\n	$0\n}" "if" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/if" nil nil)
                       ("idk" "// I don't know how this works. Don't touch it." "idk" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/idk" nil nil)
                       ("idfk" "// Don't FUCKING touch this." "idfk" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/idfk" nil nil)
                       ("funl" "function (${1:int x}) => $2${3:;}" "funl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/funl" nil nil)
                       ("fun" "${1:auto} ${2:func}(${3:params}) {\n	$0\n}" "fun" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/fun" nil nil)
                       ("fsw" "final switch($1) {\n	$0\n}" "fsw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/fsw" nil nil)
                       ("for" "for(int ${1:i} = 0; $1 < ${2:count}; $1++) {\n	$0\n}" "for" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/for" nil nil)
                       ("find" "find!(${1:p})($2:xs);\n$0" "find" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/find" nil nil)
                       ("fin" "final" "fin" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/fin" nil nil)
                       ("filter" "filter!(${1:p})(${2:xs});\n$0" "filter" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/filter" nil nil)
                       ("file" "auto ${1:f} = File(${2:\"useful_info.xml\"}, ${3:\"rw\"});\n$0" "file" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/file" nil nil)
                       ("feri" "foreach_reverse(${1:i}, ${2:elem}; ${3:range}) {\n	$0  \n}" "feri" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/feri" nil nil)
                       ("fer" "foreach_reverse(${1:elem}; ${2:range}) {\n	$0	\n} " "fer" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/fer" nil nil)
                       ("fei" "foreach(${1:i}, ${2:elem}; ${3:range}) {\n	$0	\n} " "fei" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/fei" nil nil)
                       ("fe" "foreach(${1:elem}; ${2:range}) {\n	$0\n}" "fe" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/fe" nil nil)
                       ("enum" "enum $1 {\n	$0\n}" "enum" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/enum" nil nil)
                       ("el" "else {\n	$1	\n}" "el" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/el" nil nil)
                       ("eif" "else if($1) {\n	$0\n}" "eif" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/eif" nil nil)
                       ("dtor" "~this($1) {\n	$0\n}" "dtor" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/dtor" nil nil)
                       ("dowh" "do {\n	$1\n} while($2);" "dowh" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/dowh" nil nil)
                       ("del" "delegate (${1:int x}) => $2${3:;} " "del" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/del" nil nil)
                       ("def" "default:\n	$0" "def" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/def" nil nil)
                       ("de" "debug {\n	$0\n}" "de" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/de" nil nil)
                       ("ctor" "this($1) {\n	$0\n} " "ctor" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/ctor" nil nil)
                       ("cs" "case ${1:0}:\n	$2\n	break;" "cs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/cs" nil nil)
                       ("conv" "std.conv" "conv" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/conv" nil nil)
                       ("contr" "in {\n	$1\n} out {\n	$2\n} body {\n	$0\n}" "contr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/contr" nil nil)
                       ("con" "const" "con" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/con" nil nil)
                       ("cl" "class${1:(T)} ${2:`(file-name-base)`} {\n	$0	\n}" "cl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/cl" nil nil)
                       ("cast" "cast(${1:T})(${2:val});" "cast" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/cast" nil nil)
                       ("bang" "#!/usr/bin/env rdmd" "bang" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/bang" nil nil)
                       ("asm" "asm {\n	$1\n}" "asm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/asm" nil nil)
                       ("arr" "std.array" "arr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/arr" nil nil)
                       ("alth" "alias ${1:value} this;\n$0" "alth" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/alth" nil nil)
                       ("algo" "std.algorithm" "algo" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/algo" nil nil)
                       ("al" "alias ${1:b} = ${2:a};\n$0" "al" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/al" nil nil)
                       ("aa" "${1:int}[${2:string}] ${3:dict} = $0;" "aa" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/aa" nil nil)
                       ("/*" "/*\n * $1\n*/" "/*" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/__" nil nil)
                       ("?" "(${1: a > b}) ? ${2:a} : ${3:b}; " "?" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/_" nil nil)
                       ("PF" "__PRETTY_FUNCTION__" "PF" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/PF" nil nil)
                       ("MOD" "__MODULE__" "MOD" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/MOD" nil nil)
                       ("LINE" "__LINE__" "LINE" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/LINE" nil nil)
                       ("FUN" "__FUNCTION__" "FUN" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/FUN" nil nil)
                       ("FILE" "__FILE__" "FILE" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/FILE" nil nil)
                       ("#!" "#!/usr/bin/env rdmd" "#!" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/d-mode/#!" nil nil)))


;;; Do not edit! File generated at Sun Oct 25 17:07:30 2015
