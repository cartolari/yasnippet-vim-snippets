;;; Compiled snippets and support files for `go-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'go-mode
                     '(("vr" "var ${1:t} ${0:string}" "vr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/vr" nil nil)
                       ("vars" "var (\n  $1 $2 = $3\n)" "vars" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/vars" nil nil)
                       ("var" "var $1 $2 = $3" "var" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/var" nil nil)
                       ("v" "$1 := $2" "v" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/v" nil nil)
                       ("test" "func Test${1:name}(t *testing.T) {\n  ${0:`yas-selected-text`}\n}" "test function" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/test" nil nil)
                       ("t" "true" "t" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/t" nil nil)
                       ("sw" "switch ${1:var} {\ncase ${2:value1}:\n  $3\ncase ${4:value2}:\n  $5\ndefault:\n  $0\n}" "sw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/sw" nil nil)
                       ("st" "struct ${1:name} {\n  ${2:/* data */}\n}\n$0" "st" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/st" nil nil)
                       ("sr" "string" "sr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/sr" nil nil)
                       ("sp" "fmt.Sprintf(\"%${1:s}\", ${2:var})" "sp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/sp" nil nil)
                       ("sl" "select {\ncase ${1:v1} := <-${2:chan1}\n  $3\ndefault:\n  $0\n}" "sl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/sl" nil nil)
                       ("rt" "return $0" "rt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/rt" nil nil)
                       ("rs" "result" "rs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/rs" nil nil)
                       ("rn" "range $0" "rn" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/rn" nil nil)
                       ("pr" "fmt.Printf(\"%${1:s}\\n\", ${2:var})" "pr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/pr" nil nil)
                       ("pn" "panic(\"${0:msg}\")" "pn" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/pn" nil nil)
                       ("pl" "fmt.Println(\"${1:s}\")" "pl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/pl" nil nil)
                       ("pa" "package ${1:main}" "pa" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/pa" nil nil)
                       ("nw" "new(${0:type})" "nw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/nw" nil nil)
                       ("mp" "map[${1:string}]${0:int}" "mp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/mp" nil nil)
                       ("mk" "make(${1:[]string}, ${0:0})" "mk" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/mk" nil nil)
                       ("main" "func main() {\n  $1\n}\n$0" "main" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/main" nil nil)
                       ("lp" "log.Println(\"$1\")" "lp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/lp" nil nil)
                       ("lf" "log.Printf(\"%${1:s}\", ${2:var})" "lf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/lf" nil nil)
                       ("ir" "if err != nil {\n  return err\n}\n$0" "ir" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/ir" nil nil)
                       ("inf" "interface ${1:name} {\n  ${2:/* methods */}\n}" "inf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/inf" nil nil)
                       ("in" "interface{}" "in" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/in" nil nil)
                       ("im" "import (\n  \"${1:package}\"\n)" "im" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/im" nil nil)
                       ("ife" "if ${1:/* condition */} {\n  ${2:`yas-selected-text`}\n} else {\n  $0\n}" "ife" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/ife" nil nil)
                       ("if" "if ${1:/* condition */} {\n  ${2:`yas-selected-text`}\n}" "if" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/if" nil nil)
                       ("i" "int" "i" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/i" nil nil)
                       ("ga" "go func($1 ${2:type}) {\n  ${3:/* code */}\n}($0)" "ga" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/ga" nil nil)
                       ("g" "go ${1:funcName}($0)" "g" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/g" nil nil)
                       ("fun" "func ${1:funcName}($2) ${3:error} {\n  $4\n}\n$0" "fun" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/fun" nil nil)
                       ("fum" "func (${1:receiver} ${2:type}) ${3:funcName}($4) ${5:error} {\n  $6\n}\n$0" "fum" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/fum" nil nil)
                       ("ft" "fallthrough" "ft" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/ft" nil nil)
                       ("forr" "for ${1:e} := range ${2:collection} {\n  ${0:`yas-selected-text`}\n}" "forr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/forr" nil nil)
                       ("fori" "for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {\n  ${0:`yas-selected-text`}\n}" "fori" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/fori" nil nil)
                       ("for" "for $1{\n  ${0:`yas-selected-text`}\n}" "for" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/for" nil nil)
                       ("fl" "float32" "fl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/fl" nil nil)
                       ("f6" "float64" "f6" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/f6" nil nil)
                       ("f3" "float32" "f3" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/f3" nil nil)
                       ("f" "false" "f" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/f" nil nil)
                       ("el" "else {\n  ${0:`yas-selected-text`}\n}" "el" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/el" nil nil)
                       ("dfr" "defer func() {\n  if err := recover(); err != nil {\n  	${0:`yas-selected-text`}\n  }\n}()" "dfr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/dfr" nil nil)
                       ("df" "defer ${0:func}()" "df" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/df" nil nil)
                       ("cs" "case ${1:value}:\n  ${0:`yas-selected-text`}" "cs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/cs" nil nil)
                       ("co" "const (\n  ${1:NAME1} = iota\n  ${0:NAME2}\n)" "co" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/co" nil nil)
                       ("cn" "continue" "cn" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/cn" nil nil)
                       ("ch" "chan ${0:int}" "ch" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/ch" nil nil)
                       ("c" "const ${1:NAME} = ${0:0}" "c" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/c" nil nil)
                       ("bt" "byte" "bt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/bt" nil nil)
                       ("br" "break" "br" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/br" nil nil)
                       ("bl" "bool" "bl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/bl" nil nil)
                       ("bench" "func Benchmark${1:name}(b *testing.B) {\n  for i := 0; i < b.N; i++ {\n  	$2\n  }\n}\n$0" "benchmark function" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/bench" nil nil)
                       ("ap" "append(${1:slice}, ${0:value})" "ap" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/go-mode/ap" nil nil)))


;;; Do not edit! File generated at Mon May  8 02:40:50 2017
