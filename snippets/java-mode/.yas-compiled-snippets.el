;;; Compiled snippets and support files for `java-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'java-mode
                     '(("wh" "while ($1) $0" "wh" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/wh" nil nil)
                       ("warn" "Logger.warn(${1:param});" "warn" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/warn" nil nil)
                       ("v" "${1:String} ${2:var}${3: = null}$4;" "v" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/v" nil nil)
                       ("unless" "(unless=${1:param});" "unless" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/unless" nil nil)
                       ("tryf" "try {\n  ${0:`yas-selected-text`}\n} catch(${1:Exception} ${2:e}) {\n} finally {\n}" "tryf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/tryf" nil nil)
                       ("try" "try {\n  ${0:`yas-selected-text`}\n} catch(${1:Exception} ${2:e}) {\n}" "try" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/try" nil nil)
                       ("ths" "throws $0" "ths" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/ths" nil nil)
                       ("thr" "throw $0" "thr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/thr" nil nil)
                       ("test" "@Test\npublic void test${1:Name}() throws Exception {\n  $0\n}" "test" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/test" nil nil)
                       ("tc" "public class ${1:`(file-name-base)`} extends ${0:TestCase}" "tc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/tc" nil nil)
                       ("t" "public void test${1:Name}() throws Exception {\n  $0\n}" "t" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/t" nil nil)
                       ("sy" "synchronized $0" "sy" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/sy" nil nil)
                       ("sw" "switch ($1) {\n  $0\n}" "sw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/sw" nil nil)
                       ("st" "static $0" "st" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/st" nil nil)
                       ("sout" "System.out.println($0);" "sout" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/sout" nil nil)
                       ("singlet" "private static class Holder {\n  private static final ${1:`(file-name-base)`} INSTANCE = new $1();\n}\n\nprivate $1() { }\n\npublic static $1 getInstance() {\n  return Holder.INSTANCE;\n}" "singlet" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/singlet" nil nil)
                       ("set" "${1:public} void set${3:}(${2:String} ${0:}){\n  this.$4 = $4;\n}" "set" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/set" nil nil)
                       ("serr" "System.err.println($0);" "serr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/serr" nil nil)
                       ("ru" "unauthorized(${1:param});" "ru" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/ru" nil nil)
                       ("rr" "redirect(${1:param});" "rr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/rr" nil nil)
                       ("rnfin" "notFoundIfNull(${1:param});" "rnfin" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/rnfin" nil nil)
                       ("rnf" "notFound(${1:param});" "rnf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/rnf" nil nil)
                       ("renx" "renderXml(${1:param});" "renx" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/renx" nil nil)
                       ("renj" "renderJSON(${1:param});" "renj" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/renj" nil nil)
                       ("renb" "renderBinary(${1:param});" "renb" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/renb" nil nil)
                       ("rena" "renderArgs.put(\"$1\", $2);" "rena" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/rena" nil nil)
                       ("ren" "render(${1:param});" "ren" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/ren" nil nil)
                       ("re" "return $0" "re" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/re" nil nil)
                       ("pu" "public $0" "pu" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/pu" nil nil)
                       ("psvm" "public static void main (String[] args) {\n  $0\n}" "psvm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/psvm" nil nil)
                       ("printlna" "System.out.println(Arrays.toString($0));" "printlna" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/printlna" nil nil)
                       ("println" "System.out.println($0);" "println" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/println" nil nil)
                       ("printf" "System.out.printf(\"${1:Message}\", ${0:args});" "printf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/printf" nil nil)
                       ("print" "System.out.print(\"${0:Message}\");" "print" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/print" nil nil)
                       ("pr" "private $0" "pr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/pr" nil nil)
                       ("po" "protected $0" "po" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/po" nil nil)
                       ("pcl" "public class ${1:`(file-name-base)`} $0" "pcl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/pcl" nil nil)
                       ("oo" "@OneToOne\n$1" "oo" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/oo" nil nil)
                       ("om" "@OneToMany${1:(cascade=CascadeType.ALL)}\n$0" "om" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/om" nil nil)
                       ("mo" "@ManyToOne\n$0" "mo" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/mo" nil nil)
                       ("mm" "@ManyToMany\n$0" "mm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/mm" nil nil)
                       ("main" "public static void main (String[] args) {\n  $0\n}" "main" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/main" nil nil)
                       ("m" "${1:void} ${2:method}($3) ${4:throws }" "m" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/m" nil nil)
                       ("j.u" "java.util." "j.u" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/j.u" nil nil)
                       ("j.n" "java.net." "j.n" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/j.n" nil nil)
                       ("j.m" "java.math." "j.m" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/j.m" nil nil)
                       ("j.i" "java.io." "j.i" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/j.i" nil nil)
                       ("j.b" "java.beans." "j.b" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/j.b" nil nil)
                       ("info" "Logger.info(${1:param});" "info" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/info" nil nil)
                       ("in" "interface ${1:`(file-name-base)`} ${2:extends Parent}" "in" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/in" nil nil)
                       ("imp" "implements $0" "imp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/imp" nil nil)
                       ("im" "import $0" "im" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/im" nil nil)
                       ("if" "if ($1) $0" "if" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/if" nil nil)
                       ("get" "${1:public} ${2:String} get${3:}(){\n  return this.${0:};\n}" "get" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/get" nil nil)
                       ("for" "for ($1; $2; $3) $0" "for" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/for" nil nil)
                       ("findbyid" "${1:var} ${2:item} = $1.findById($3);" "findbyid" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/findbyid" nil nil)
                       ("findall" "List<${1:listName}> ${2:items} = $1.findAll();" "findall" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/findall" nil nil)
                       ("fi" "final $0" "fi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/fi" nil nil)
                       ("fa" "fail(\"${1:Failure message}\");" "fa" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/fa" nil nil)
                       ("ext" "extends $0" "ext" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/ext" nil nil)
                       ("error" "Logger.error(${1:param});" "error" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/error" nil nil)
                       ("errln" "System.err.println(\"${0:Message}\");" "errln" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/errln" nil nil)
                       ("errf" "System.err.printf(\"${1:Message}\", ${0:exception});" "errf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/errf" nil nil)
                       ("err" "System.err.print(\"${0:Message}\");" "err" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/err" nil nil)
                       ("enfor" "for ($1 : $2) $0" "enfor" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/enfor" nil nil)
                       ("el" "else" "el" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/el" nil nil)
                       ("eif" "else if ($1) $0" "eif" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/eif" nil nil)
                       ("def" "default:\n  $0" "def" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/def" nil nil)
                       ("debug" "Logger.debug(${1:param});" "debug" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/debug" nil nil)
                       ("d.st" "Stack<${1:Object}> ${2:stack} = new Stack<$1>();$0" "d.st" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/d.st" nil nil)
                       ("d.hs" "Set<${1:Object}> ${2:set} = new HashSet<$1>();$0" "d.hs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/d.hs" nil nil)
                       ("d.hm" "Map<${1:Object}, ${2:Object}> ${3:map} = new HashMap<$1, $2>();$0" "d.hm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/d.hm" nil nil)
                       ("d.al" "List<${1:Object}> ${2:list} = new ArrayList<$1>();$0" "d.al" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/d.al" nil nil)
                       ("cos" "static public final String ${1:var} = \"$2\";" "cos" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/cos" nil nil)
                       ("co" "static public final ${1:String} ${2:var} = $3;" "co" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/co" nil nil)
                       ("cl" "class ${1:`(file-name-base)`} $0" "cl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/cl" nil nil)
                       ("case" "case $1:\n  $0" "case" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/case" nil nil)
                       ("ca" "catch(${1:Exception} ${2:e}) $0" "ca" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/ca" nil nil)
                       ("br" "break;" "br" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/br" nil nil)
                       ("before" "@Before\nstatic void ${1:intercept}(${2:args}) { $0 }" "before" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/before" nil nil)
                       ("at" "assertTrue(\"${1:Failure message}\", ${2:condition});" "at" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/at" nil nil)
                       ("ass" "assertSame(\"${1:Failure message}\", ${2:expected}, ${3:actual});" "ass" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/ass" nil nil)
                       ("asns" "assertNotSame(\"${1:Failure message}\", ${2:expected}, ${3:actual});" "asns" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/asns" nil nil)
                       ("as" "assert ${1:test} : \"${2:Failure message}\";" "as" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/as" nil nil)
                       ("ann" "assertNotNull(\"${1:Failure message}\", ${2:object});" "ann" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/ann" nil nil)
                       ("an" "assertNull(\"${1:Failure message}\", ${2:object});" "an" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/an" nil nil)
                       ("af" "assertFalse(\"${1:Failure message}\", ${2:condition});" "af" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/af" nil nil)
                       ("ae" "assertEquals(\"${1:Failure message}\", ${2:expected}, ${3:actual});" "ae" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/ae" nil nil)
                       ("action" "public static void ${1:index}(${2:args}) { $0 }" "action" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/action" nil nil)
                       ("ab" "abstract $0" "ab" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/ab" nil nil)
                       ("aae" "assertArrayEquals(\"${1:Failure message}\", ${2:expecteds}, ${3:actuals});" "aae" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/aae" nil nil)
                       ("/**" "/**\n * $0\n */" "/**" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/___" nil nil)
                       ("/*" "/*\n * $0\n */" "/*" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/__" nil nil)
                       ("Sc" "Scanner" "Sc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/Sc" nil nil)
                       ("@re" "@return ${0:param}" "@re" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/@re" nil nil)
                       ("@pa" "@param ${0:param}" "@pa" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/@pa" nil nil)
                       ("@fi" "@file ${0:`(file-name-base)`}.java" "@fi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/@fi" nil nil)
                       ("@br" "@brief ${0:Description}" "@br" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/@br" nil nil)
                       ("@au" "@author id -un\\" "@au" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/java-mode/@au" nil nil)))


;;; Do not edit! File generated at Mon May  8 02:40:51 2017
