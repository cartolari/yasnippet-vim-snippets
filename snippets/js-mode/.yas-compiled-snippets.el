;;; Compiled snippets and support files for `js2-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'js2-mode
                     '(("wh" "while (${1:/* condition */}) {\n  ${0:`yas-selected-text`}\n}" "\"(condition) { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/wh" nil nil)
                       ("vf" "var ${1:function_name} = function $1($2) {\n  ${0:`yas-selected-text`}\n};" "vf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/vf" nil nil)
                       ("vaf" "var ${1:function_name} = function($2) {\n  ${0:`yas-selected-text`}\n};" "vaf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/vaf" nil nil)
                       ("us" "'use strict';" "us" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/us" nil nil)
                       ("tryf" "try {\n  ${0:`yas-selected-text`}\n} catch (${1:e}) {\n  ${2:/* handle error */}\n} finally {\n  ${3:/* be executed regardless of the try / catch result*/}\n}" "\"try { ... } catch(e) { ... } finally { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/tryf" nil nil)
                       ("try" "try {\n  ${0:`yas-selected-text`}\n} catch (${1:e}) {\n  ${2:/* handle error */}\n}" "\"try { ... } catch(e) { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/try" nil nil)
                       ("timeout" "setTimeout(function () {$0}$2, ${1:10});" "timeout" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/timeout" nil nil)
                       ("terr" "throw new Error('${1:error message}')" "terr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/terr" nil nil)
                       ("ter" "${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}" "ter" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/ter" nil nil)
                       ("switch" "switch (${1:expression}) {\n  case '${3:case}':\n  	$4\n  	break;\n  $0\n  default:\n  	$2\n}" "switch" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/switch" nil nil)
                       ("sing" "function ${1:Singleton} (${2:argument}) {\n  // the cached instance\n  var instance;\n\n  // rewrite the constructor\n  $1 = function $1($2) {\n  	return instance;\n  };\n\n  // carry over the prototype properties\n  $1.prototype = this;\n\n  // the instance\n  instance = new $1();\n\n  // reset the constructor pointer\n  instance.constructor = $1;\n\n  $0\n\n  return instance;\n}" "sing" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/sing" nil nil)
                       ("sdf" "var ${1:function_name} = function (${2:argument}) {\n  $3\n\n  $1 = function ($2) {\n  	${0:`yas-selected-text`}\n  };\n};" "sdf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/sdf" nil nil)
                       ("ret" "return ${0:result};" "ret" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/ret" nil nil)
                       ("qsa" "${1:document}.querySelectorAll('${0:CSS selector}')" "qsa" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/qsa" nil nil)
                       ("qs" "${1:document}.querySelector('${0:CSS selector}')" "qs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/qs" nil nil)
                       ("proto" "${1:class_name}.prototype.${2:method_name} = function($3) {\n  ${0:`yas-selected-text`}\n};" "proto" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/proto" nil nil)
                       ("props" "var ${1:my_object} = Object.defineProperties(\n  ${2:new Object()},\n  {\n  	${3:property} : {\n  		get : function $1_$3_getter() {\n  			// getter code\n  		},\n  		set : function $1_$3_setter(value) {\n  			// setter code\n  		},\n  		value        : ${4:value},\n  		writeable    : ${5:boolean},\n  		enumerable   : ${6:boolean},\n  		configurable : ${0:boolean}\n  	}\n  }\n);" "props" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/props" nil nil)
                       ("prop" "Object.defineProperty(\n  ${1:object},\n  '${2:property}',\n  {\n  	get : function $1_$2_getter() {\n  		// getter code\n  	},\n  	set : function $1_$2_setter(value) {\n  		// setter code\n  	},\n  	value        : ${3:value},\n  	writeable    : ${4:boolean},\n  	enumerable   : ${5:boolean},\n  	configurable : ${0:boolean}\n  }\n);" "prop" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/prop" nil nil)
                       ("obj" "function object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}" "obj" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/obj" nil nil)
                       ("jsons" "JSON.stringify(${0:object});" "jsons" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/jsons" nil nil)
                       ("jsonp" "JSON.parse(${0:jstr});" "jsonp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/jsonp" nil nil)
                       ("ife" "if (${1:true}) {\n  ${0:`yas-selected-text`}\n} else {\n  $2\n}" "\"if (condition) { ... } else { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/ife" nil nil)
                       ("if" "if (${1:true}) {\n  ${0:`yas-selected-text`}\n}" "\"if (condition) { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/if" nil nil)
                       ("has" "hasOwnProperty($0)" "has" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/has" nil nil)
                       ("gett" "getElementBy${1:Id}('$0')" "gett" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/gett" nil nil)
                       ("get" "getElementsBy${1:TagName}('$0')" "get" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/get" nil nil)
                       ("fun" "function ${1:function_name}($2) {\n  ${0:`yas-selected-text`}\n}" "fun" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/fun" nil nil)
                       ("forr" "for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {\n  ${0:`yas-selected-text`}\n}" "\"reversed for (...) {...}\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/forr" nil nil)
                       ("fori" "for (var ${1:prop} in ${2:object}) {\n  ${0:$2[$1]}\n}" "fori" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/fori" nil nil)
                       ("for" "for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {\n  ${0:`yas-selected-text`}\n}" "\"for (...) {...}\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/for" nil nil)
                       ("f" "function($1) {\n  ${0:`yas-selected-text`}\n}" "\"\" w" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/f" nil nil)
                       ("do" "do {\n  ${0:`yas-selected-text`}\n} while (${1:/* condition */});" "\"do { ... } while (condition)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/do" nil nil)
                       ("de" "debugger;" "de" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/de" nil nil)
                       ("cw" "console.warn($0);" "\"console.warn\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/cw" nil nil)
                       ("ctimestamp" "console.timeStamp(\"${1:label}\");" "\"console.timeStamp\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/ctimestamp" nil nil)
                       ("ctime" "console.time(\"${1:label}\");\n${0:`yas-selected-text`}\nconsole.timeEnd(\"$1\");" "\"console.time ... console.timeEnd\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/ctime" nil nil)
                       ("ctable" "console.table(${1:\"${2:value}\"});" "\"console.table\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/ctable" nil nil)
                       ("ct" "console.trace(${0:label});" "\"console.trace\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/ct" nil nil)
                       ("cprof" "console.profile(\"${1:label}\");\n${0:`yas-selected-text`}\nconsole.profileEnd();" "\"console.profile\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/cprof" nil nil)
                       ("cl" "console.log($0);" "\"console.log\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/cl" nil nil)
                       ("ci" "console.info($0);" "\"console.info\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/ci" nil nil)
                       ("cgroupc" "console.groupCollapsed(\"${1:label}\");\n${0:`yas-selected-text`}\nconsole.groupEnd();" "\"console.groupCollapsed\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/cgroupc" nil nil)
                       ("cgroup" "console.group(\"${1:label}\");\n${0:`yas-selected-text`}\nconsole.groupEnd();" "\"console.group\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/cgroup" nil nil)
                       ("ce" "console.error($0);" "\"console.error\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/ce" nil nil)
                       ("cdirx" "console.dirxml(${1:object});" "\"console.dirxml\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/cdirx" nil nil)
                       ("cdir" "console.dir(${0:obj});" "\"console.dir\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/cdir" nil nil)
                       ("cd" "console.debug($0);" "\"console.debug\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/cd" nil nil)
                       ("cclear" "console.clear();" "\"console.clear\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/cclear" nil nil)
                       ("case" "case '${1:case}':\n  ${0:`yas-selected-text`}\n  break;" "\"case 'xyz': ... break\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/case" nil nil)
                       ("ca" "console.assert(${1:expression}, ${0:obj});" "\"console.assert\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/ca" nil nil)
                       ("by." "${1:document}.getElementsByClassName('${0:class}')" "by." nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/by." nil nil)
                       ("by#" "${1:document}.getElementById('${0:element ID}')" "by#" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/by#" nil nil)
                       (":f" "${1:method_name}: function (${2:attribute}) {\n  ${0:`yas-selected-text`}\n}," ":f" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/_f" nil nil)
                       ("/**" "/**\n * ${0:description}\n *\n */" "/**" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/___" nil nil)
                       ("@ret" "@return {${1:type}} ${0:description}\n" "@ret" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/@ret" nil nil)
                       ("@par" "@param {${1:type}} ${2:name} ${0:description}" "@par" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/@par" nil nil)
                       (";fe" ";(function($1) {\n  ${0:`yas-selected-text`}\n}($2))" ";fe" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/;fe" nil nil)
                       ("(f" "(function($1) {\n  ${0:`yas-selected-text`}\n}($2));" "(f" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/js2-mode/(f" nil nil)))


;;; Do not edit! File generated at Mon May  8 02:40:51 2017
