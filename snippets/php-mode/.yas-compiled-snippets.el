;;; Compiled snippets and support files for `php-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'php-mode
                     '(("wh" "while (${1:/* condition */}) {\n  ${0:`yas-selected-text`}\n}" "\"while (condition) { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/wh" nil nil)
                       ("ve" "echo '<pre>' . var_export($1, 1) . '</pre>';" "\"Dumb debug helper in HTML\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ve" nil nil)
                       ("vdf" "error_log(print_r($${1:foo}, true), 3, '${2:/tmp/debug.log}');" "vdf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/vdf" nil nil)
                       ("vdd" "var_dump($1); die(${0:});" "vdd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/vdd" nil nil)
                       ("vd" "var_dump($0);" "vd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/vd" nil nil)
                       ("var" "var_export($1);" "\"var_export($var)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/var" nil nil)
                       ("try" "try {\n  ${0:`yas-selected-text`}\n} catch (${1:Exception} $e) {\n}" "\"try { ... } catch (Exception $e) { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/try" nil nil)
                       ("trait" "/**\n * ${2:undocumented class}\n *\n * @package ${3:default}\n * @author ${4:`\"Name\"`}\n */\ntrait ${1:}\n{\n  ${0:`yas-selected-text`}\n}" "trait" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/trait" nil nil)
                       ("testcmt" "/**\n* @group $1\n*/" "\"phpunit comment with group\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/testcmt" nil nil)
                       ("test" "public function test$1()\n{\n  ${0:`yas-selected-text`}\n}" "\"public function testXYZ() { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/test" nil nil)
                       ("teardown" "protected function tearDown()\n{\n  ${0:`yas-selected-text`}\n}" "\"protected function tearDown() { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/teardown" nil nil)
                       ("te" "throw new ${1:Exception}(\"${2:Error Processing Request}\");" "\"throw new Exception()\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/te" nil nil)
                       ("t." "$this->" "t." nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/t." nil nil)
                       ("t" "$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};" "\"$retVal = (condition) ? a : b\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/t" nil nil)
                       ("switch" "switch ($${1:variable}) {\n  case '${2:value}':\n  	$3\n  	break;\n  $0\n  default:\n  	$4\n  	break;\n}" "\"switch($var) { case 'xyz': ... default: .... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/switch" nil nil)
                       ("static_var" "static $$1 = null;\nif (is_null($$1)){\n  $$1 = $2;\n}" "static_var" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/static_var" nil nil)
                       ("sr" "str_replace(${1:search}, ${2:replace}, ${3:subject})$0" "\"str_replace\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/sr" nil nil)
                       ("sm" "/**\n * Sets the value of ${1:foo}\n *\n * @param ${2:string} $$1 ${3:description}\n *\n * @return ${4:}\n */\n${5:public} function set${6:$1}(${7:$2 }$$1)\n{\n  $this->${8:$1} = $$1;\n\n  return $this;\n}" "\"PHP Class Setter\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/sm" nil nil)
                       ("setup" "protected function setUp()\n{\n  ${0:`yas-selected-text`}\n}" "\"protected function setUp() { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/setup" nil nil)
                       ("session" "$_SESSION['$1']" "\"session\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/session" nil nil)
                       ("rett" "return true;" "rett" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/rett" nil nil)
                       ("retf" "return false;" "retf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/retf" nil nil)
                       ("req1" "require_once '${1:file}';" "req1" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/req1" nil nil)
                       ("req" "require '${1:file}';" "req" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/req" nil nil)
                       ("prs" "print_r($0, 1);" "prs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/prs" nil nil)
                       ("proph" "$${1:observer} = $this->prophesize(${2:SomeClass}::class);" "\"$observer = $this->prophesize(SomeClass::class);\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/proph" nil nil)
                       ("pr" "print_r($0);" "pr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/pr" nil nil)
                       ("post" "$_POST['$1']" "\"post\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/post" nil nil)
                       ("pdd" "echo '<pre>'; var_dump($1); echo '</pre>'; die(${0:});" "pdd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/pdd" nil nil)
                       ("pd" "echo '<pre>'; var_dump($0); echo '</pre>';" "pd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/pd" nil nil)
                       ("pc" "var_export($1);$0" "\"Dumb debug helper in cli\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/pc" nil nil)
                       ("ns" "namespace ${1:Foo\\Bar\\Baz};\n\n${0:`yas-selected-text`}" "ns" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ns" nil nil)
                       ("nc" "namespace ${1:};\n\n${2:abstract }class ${3:}\n{\n  ${0:`yas-selected-text`}\n}" "nc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/nc" nil nil)
                       ("mock" "$${1:mock} = $this->createMock(${2:SomeClass}::class);" "\"$mock = $this->createMock(SomeClass::class);\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/mock" nil nil)
                       ("marks" "$this->markTestSkipped($1);" "\"$this->markTestSkipped()\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/marks" nil nil)
                       ("marki" "$this->markTestIncomplete($1);" "\"$this->markTestIncomplete()\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/marki" nil nil)
                       ("m" "${1:protected} function ${2:foo}()\n{\n  ${0:`yas-selected-text`}\n}" "m" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/m" nil nil)
                       ("log" "error_log(var_export($1, true));" "\"error_log(var_export($var, true));\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/log" nil nil)
                       ("lambda" "${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {\n  $0\n};" "lambda" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/lambda" nil nil)
                       ("isa" "isset($${1:array}[${2:key}])$0" "\"isset array\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/isa" nil nil)
                       ("is" "isset(${1:var})$0" "\"isset\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/is" nil nil)
                       ("interface" "/**\n * ${2:undocumented class}\n *\n * @package ${3:default}\n * @author ${4:`\"Name\"`}\n */\ninterface ${1:}\n{\n  ${0:`yas-selected-text`}\n}" "interface" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/interface" nil nil)
                       ("inheritdoc" "/**\n * {@inheritdoc}\n */" "\"@inheritdoc docblock\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/inheritdoc" nil nil)
                       ("inc1" "include_once '${1:file}';" "inc1" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/inc1" nil nil)
                       ("inc" "include '${1:file}';" "inc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/inc" nil nil)
                       ("in" "is_null($${1:var})$0" "\"is_null\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/in" nil nil)
                       ("ifn" "if (!$1) {\n  ${0:`yas-selected-text`}\n}" "\"if (!condition) { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ifn" nil nil)
                       ("ifil" "<?php if ($1): ?>\n  ${0:`yas-selected-text`}\n<?php endif; ?>" "\"<?php if (condition): ?> ... <?php endif; ?>\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ifil" nil nil)
                       ("ifeil" "<?php if ($1): ?>\n  ${0:`yas-selected-text`}\n<?php else: ?>\n  $2\n<?php endif; ?>" "\"<?php if (condition): ?> ... <?php else: ?> ... <?php endif; ?>\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ifeil" nil nil)
                       ("ife" "if ($1) {\n  ${0:`yas-selected-text`}\n} else {\n  $2\n}" "\"if (cond) { ... } else { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ife" nil nil)
                       ("if" "if ($1) {\n  ${0:`yas-selected-text`}\n}" "\"if (condition) { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/if" nil nil)
                       ("id" "is_dir(${1:path})$0" "\"is_dir\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/id" nil nil)
                       ("ia" "in_array(${1:needle}, ${2:haystack})$0" "\"in_array\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ia" nil nil)
                       ("i" "interface ${1:}\n{\n  ${0:`yas-selected-text`}\n}" "i" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/i" nil nil)
                       ("http_redirect" "header (\"HTTP/1.1 301 Moved Permanently\");\nheader (\"Location: \".URL);\nexit();" "http_redirect" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/http_redirect" nil nil)
                       ("gs" "/**\n * Gets the value of ${1:foo}\n *\n * @return ${2:string}\n */\npublic function get${3:$1}()\n{\n  return $this->${4:$1};\n}\n\n/**\n * Sets the value of $1\n *\n * @param $2 $$1 ${5:description}\n *\n * @return ${6:}\n */\npublic function set$3(${7:$2 }$$1)\n{\n  $this->$4 = $$1;\n  return $this;\n}" "\"PHP Class Getter Setter\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/gs" nil nil)
                       ("gm" "/**\n * Gets the value of ${1:foo}\n *\n * @return ${2:string}\n */\n${3:public} function get${4:$1}()\n{\n  return $this->${5:$1};\n}" "\"PHP Class Getter Setter\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/gm" nil nil)
                       ("get" "$_GET['$1']" "\"get\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/get" nil nil)
                       ("fpc" "file_put_contents(${1:file}, ${2:content}${3:, FILE_APPEND});$0" "\"file_put_contents\" b" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/fpc" nil nil)
                       ("foreachkil" "<?php foreach ($${1:variable} as $${2:key} => $${3:value}): ?>\n  ${0:<!-- html... -->}\n<?php endforeach; ?>" "\"<?php foreach ($var as $key => $value): ?>  ... <?php endforeach; ?>\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/foreachkil" nil nil)
                       ("foreachk" "foreach ($${1:variable} as $${2:key} => $${3:value}) {\n  ${0:`yas-selected-text`}\n}" "\"foreach ($var as $key => $value) { .. }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/foreachk" nil nil)
                       ("foreachil" "<?php foreach ($${1:variable} as $${2:value}): ?>\n  ${0:`yas-selected-text`}\n<?php endforeach; ?>" "\"<?php foreach ($var as $value): ?>  ... <?php endforeach; ?>\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/foreachil" nil nil)
                       ("foreach" "foreach ($${1:variable} as $${2:value}) {\n  ${0:`yas-selected-text`}\n}" "\"foreach ($var as $value) { .. }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/foreach" nil nil)
                       ("for" "for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {\n  ${0:`yas-selected-text`}\n}" "\"for ($i = 0; $i < $count; $i++) { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/for" nil nil)
                       ("fe" "file_exists(${1:file})$0" "\"file_exists\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/fe" nil nil)
                       ("fail" "$this->fail($1);" "\"$this->fail()\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/fail" nil nil)
                       ("f" "function $1($3)\n{\n  ${0:`yas-selected-text`}\n}" "f" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/f" nil nil)
                       ("exp" "expects($this->${1:once}())\n  ->method('$2')\n  ->with($3)\n  ->willReturn($4);" "\"phpunit expects\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/exp" nil nil)
                       ("el" "else {\n  ${0:`yas-selected-text`}\n}" "\"else { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/el" nil nil)
                       ("eif" "elseif ($1) {\n  ${0:`yas-selected-text`}\n}" "\"elseif(condition) { ... }\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/eif" nil nil)
                       ("ec" "echo $0;" "ec" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ec" nil nil)
                       ("dst" "declare(strict_types=${1:1});" "\"declare(strict_types=1)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/dst" nil nil)
                       ("doc_vp" "/**\n * ${1:undocumented class variable}\n *\n * @var ${2:string}\n */" "doc_vp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_vp" nil nil)
                       ("doc_v" "/**\n * ${3:undocumented class variable}\n *\n * @var ${4:string}\n */\n${1:var} $$2;" "doc_v" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_v" nil nil)
                       ("doc_s" "/**\n * ${4:undocumented function}\n *\n * @return ${5:void}\n * @author ${6:`\"Name\"`}\n */\n$1function $2($3);" "doc_s" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_s" nil nil)
                       ("doc_i" "/**\n * $1\n * @package ${2:default}\n * @author ${3:}\n **/\ninterface ${1:someClass}\n{$4\n}" "\"interface someClass {}\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_i" nil nil)
                       ("doc_h" "/**\n * $1\n *\n * @author ${2:`\"Name\"`}\n * @version ${3:$Id$}\n * @copyright ${4:$2}, \n * @package ${0:default}\n */" "doc_h" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_h" nil nil)
                       ("doc_fp" "/**\n * ${1:undocumented function}\n *\n * @return ${2:void}\n * @author ${3:`\"Name\"`}\n */" "doc_fp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_fp" nil nil)
                       ("doc_f" "/**\n * ${4:undocumented function}\n *\n * @return ${5:void}\n * @author ${6:`\"Name\"`}\n */\n$1function $2($3)\n{$0\n}" "doc_f" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_f" nil nil)
                       ("doc_dp" "/**\n * ${1:undocumented constant}\n */" "doc_dp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_dp" nil nil)
                       ("doc_d" "/**\n * ${3:undocumented constant}\n */\ndefine($1, $2);" "doc_d" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_d" nil nil)
                       ("doc_cp" "/**\n * ${1:undocumented class}\n *\n * @package ${2:default}\n * @subpackage ${3:default}\n * @author ${4:`\"Name\"`}\n */" "doc_cp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_cp" nil nil)
                       ("doc_c" "/**\n * ${3:undocumented class}\n *\n * @package ${4:default}\n * @subpackage ${5:default}\n * @author ${6:`\"Name\"`}\n */\n${1:}class ${2:}\n{\n  ${0:`yas-selected-text`}\n} // END $1class $2" "doc_c" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/doc_c" nil nil)
                       ("do" "do {\n  ${0:`yas-selected-text`}\n} while ($1);" "\"do { ... } while (condition)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/do" nil nil)
                       ("def?" "$1defined('$2')" "def?" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/def_" nil nil)
                       ("def" "define('${1:VARIABLE_NAME}', ${2:'definition'});" "\"define('VARIABLE_NAME', 'definition')\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/def" nil nil)
                       ("class" "/**\n * $1\n */\nclass ${2:}\n{\n  $3\n  /**\n   * $4\n   */\n  ${5:public} function ${6:__construct}(${7:argument})\n  {\n  	$0\n  }\n}" "class" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/class" nil nil)
                       ("case" "case '${1:value}':\n  ${0:`yas-selected-text`}\n  break;" "\"case 'value': ... break\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/case" nil nil)
                       ("c" "class ${1:}\n{\n  ${0:`yas-selected-text`}\n}" "c" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/c" nil nil)
                       ("aw" "array_walk($${1:foo}, function(&$${2:v}, $${3:k}) {\n  $$2 = $0;\n});" "aw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/aw" nil nil)
                       ("ast" "$this->assertInternalType(${1:'string'}, ${2:actual});" "\"$this->assertInternalType('string', $actual)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ast" nil nil)
                       ("assub" "$this->assertArraySubset(${1:$subset}, ${2:$array});" "\"$this->assertArraySubset($subset, $array)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/assub" nil nil)
                       ("asnu" "$this->assertNull($1);" "\"$this->assertNull($a)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asnu" nil nil)
                       ("asnnu" "$this->assertNotNull($1);" "\"$this->assertNotNull($a)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asnnu" nil nil)
                       ("asnhk" "this->assertArrayNotHasKey(${1:$key}, ${2:$array});" "\"$this->assertArrayNotHasKey($key, $array)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asnhk" nil nil)
                       ("asne" "$this->assertNotEquals(${1:$expected}, ${2:$actual});" "\"$this->assertNotEquals($a, $b)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asne" nil nil)
                       ("asncon" "$this->assertNotContains(${1:$needle}, ${2:$haystack});" "\"$this->assertNotContains($needle, $haystack)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asncon" nil nil)
                       ("asnco" "$this->assertNotCount(${1:$count}, ${2:$haystack});" "\"$this->assertNotCount($count, $haystack)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asnco" nil nil)
                       ("asi" "$this->assertInstanceOf(${1:Example}::class, ${2:$actual});" "\"$this->assertInstanceOf(Example::class, $actual)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asi" nil nil)
                       ("ashk" "$this->assertArrayHasKey(${1:$key}, ${2:$array});" "\"$this->assertArrayHasKey($key, $array)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ashk" nil nil)
                       ("asfnex" "$this->assertFileNotExists(${1:'path/to/file'});" "\"$this->assertFileNotExists('path/to/file')\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asfnex" nil nil)
                       ("asfex" "$this->assertFileExists(${1:'path/to/file'});" "\"$this->assertFileExists('path/to/file')\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asfex" nil nil)
                       ("asf" "$this->assertFalse($1);" "\"$this->assertFalse($a)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asf" nil nil)
                       ("ase" "$this->assertEquals(${1:$expected}, ${2:$actual});" "\"$this->assertEquals($a, $b)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ase" nil nil)
                       ("asconoi" "$this->assertContainsOnlyInstancesOf(${1:Example}::class, ${2:$haystack});" "\"$this->assertContainsOnlyInstancesOf(Example::class, $haystack)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asconoi" nil nil)
                       ("ascono" "$this->assertContainsOnly(${1:$needle}, ${2:$haystack});" "\"$this->assertContainsOnly($needle, $haystack)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ascono" nil nil)
                       ("ascon" "$this->assertContains(${1:$needle}, ${2:$haystack});" "\"$this->assertContains($needle, $haystack)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ascon" nil nil)
                       ("asco" "$this->assertCount(${1:$expectedCount}, ${2:$haystack});" "\"$this->assertCount($count, $haystack)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/asco" nil nil)
                       ("ascha" "$this->assertClassHasAttribute(${1:$attributeName}, ${2:Example}::class);" "\"$this->assertClassHasAttribute($name, Example::class)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ascha" nil nil)
                       ("array" "$${1:arrayName} = ['$2' => $3];" "\"$... = ['' => ]\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/array" nil nil)
                       ("am" "$${1:foo} = array_map(function($${2:v}) {\n  $0\n  return $$2;\n}, $$1);" "am" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/am" nil nil)
                       ("ags" "/**\n * ${1:description}\n *\n * @$0\n */\n${2:protected} $${3:foo};\n\npublic function get${4:$3}()\n{\n  return $this->$3;\n}\n\npublic function set$4(${5:$4 }$${6:$3})\n{\n  $this->$3 = $$6;\n  return $this;\n}" "ags" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/ags" nil nil)
                       ("?i" "<?php if ($${1:var}): ?>\n  ${0:`yas-selected-text`}\n<?php endif ?>" "?i" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/_i" nil nil)
                       ("?f" "<?php foreach ($${1:vars} as $${2:$var}): ?>\n  ${0:`yas-selected-text`}\n<?php endforeach ?>" "?f" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/_f" nil nil)
                       ("<?e" "<?php echo $0 ?>" "<?e" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/__e" nil nil)
                       ("<?=" "<?=$0?>" "<?=" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/__=" nil nil)
                       ("/*" "/**\n * $0\n */" "/*" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/__" nil nil)
                       ("?=" "<?= $0 ?>" "?=" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/_=" nil nil)
                       ("?" "<?php $0 ?>" "?" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/_" nil nil)
                       ("SS" "$_SESSION['${1:variable}']" "SS" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/SS" nil nil)
                       ("S" "$_SERVER['${1:variable}']" "S" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/S" nil nil)
                       ("R" "$_REQUEST['${1:variable}']" "R" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/R" nil nil)
                       ("P" "$_POST['${1:variable}']" "\"_POST array\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/P" nil nil)
                       ("G" "$_GET['${1:variable}']" "\"_GET array\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/G" nil nil)
                       ("F" "$_FILES['${1:variable}']" "F" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/F" nil nil)
                       ("E" "$_ENV['${1:variable}']" "E" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/E" nil nil)
                       ("CSVWriter" "<?php\n\nclass CSVWriter {\n  public function __construct($file_or_handle, $sep = \"\\t\", $quot = '\"'){\n  	$args = func_get_args();\n  	$mode = isset($opts['mode']) ? $opts['mode'] : 'w';\n\n  	$this->f =\n  		is_string($file_or_handle)\n  		? fopen($file_or_handle, $mode)\n  		: $file_or_handle;\n\n  	$this->fputcsv_args = [$this->f, null, $sep, $quot];\n\n  	if (!$this->f) throw new Exception('bad file descriptor');\n  }\n\n  public function write($row){\n  	$this->fputcsv_args[1] =& $row;\n  	call_user_func_array('fputcsv', $this->fputcsv_args);\n  }\n\n  public function close(){\n  	if (!is_null($this->f))\n  		fclose($this->f);\n  	$this->f = null;\n  }\n\n  public function __destruct(){\n  	$this->close();\n  }\n\n}" "CSVWriter" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/CSVWriter" nil nil)
                       ("CSVIterator" "  // http://snipplr.com/view.php?codeview&id=1986 // modified\n  class CSVIterator implements Iterator\n  {	\n  	private $f;\n  	private $curr;\n  	private $rowCounter;\n  	 /* opts keys:\n  		* row_size\n  		* escape\n  		* enclosure\n  		* delimiter\n  		*/\n  	public function __construct( $file_or_handle, $opts = [4096, ','] )\n  	{\n  		$d = function($n) use(&$opts){ return isset($opts[$n]) ? $opts[$n] : false; };\n  		$this->combine = $d('combine');\n  		$this->headers = $d('headers');\n  		$this->headerCheckFunction = $d('header_check_function');\n  		$this->f =\n  			is_string($file_or_handle)\n  			? fopen( $file_or_handle, 'r' )\n  			: $file_or_handle;\n  		if (!$this->f) throw new Exception('bad file descriptor');\n  		$this->fgetcsv_args = [\n  				$this->f,\n  				isset($opts['row_size']) ? $opts['row_size'] : 4096,\n  				isset($opts['delimiter']) ? $opts['delimiter'] : ',',\n  				isset($opts['enclosure']) ? $opts['enclosure'] : '\"',\n  				isset($opts['escape']) ? $opts['escape'] : '\\\\',\n  		];\n  		$this->start();\n  	}\n  	protected function readRow(){\n  		$this->curr = call_user_func_array('fgetcsv', $this->fgetcsv_args );\n  		$this->rowCounter++;\n  		if ($this->rowCounter == 1){\n  			$this->processHeader();\n  		} elseif ($this->curr) {\n  			$this->processRow();\n  		}\n  	}\n  	public function processHeader(){\n  		if ($this->headers || $this->combine){\n  			$this->header = $this->curr;\n  			if ($this->headerCheckFunction){\n  				$f = $this->headerCheckFunction;\n  				$f($this->header);\n  			}\n  			$this->readRow();\n  		}\n  	}\n  	public function processRow(){\n  		if ($this->combine)\n  			$this->curr = array_combine($this->header, $this->curr);\n  	}\n  	public function start(){\n  		$this->rowCounter = 0;\n  		rewind( $this->f );\n  		$this->readRow();\n  	}\n  	public function rewind()\n  	{\n  		$this->start();\n  	}\n  	public function current()\n  	{\n  		$curr = $this->curr;\n  		$this->readRow();\n  		return $curr;\n  	}\n  	public function key()\n  	{\n  		return $this->rowCounter;\n  	}\n  	public function next()\n  	{\n  		return $this->curr;\n  	}\n  	public function valid(){\n  		if( !$this->next() )\n  		{\n  			fclose( $this->f );\n  			return FALSE;\n  		}\n  		return TRUE;\n  	}\n  } // end class" "CSVIterator" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/CSVIterator" nil nil)
                       ("C" "$_COOKIE['${1:variable}']" "C" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/C" nil nil)
                       ("=?:" "$${1:foo} = ${2:true} ? ${3:a} : $0;" "=?:" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/=__" nil nil)
                       ("$s" "${1:$foo}->set${2:Bar}($0);" "$s" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/$s" nil nil)
                       ("$g" "${1:$foo}->get${0:Bar}();" "$g" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/php-mode/$g" nil nil)))


;;; Do not edit! File generated at Mon May  8 02:40:52 2017
