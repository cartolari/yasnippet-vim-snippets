;;; Compiled snippets and support files for `python-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'python-mode
                     '(("with" "with ${1:expr} as ${2:var}:\n	$0" "with" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/with" nil nil)
                       ("wh" "while ${1:condition}:\n	$0" "wh" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/wh" nil nil)
                       ("uni" "def __unicode__(self):\n	${0:representation}" "uni" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/uni" nil nil)
                       ("try" "try:\n	$1\nexcept ${2:Exception}, ${3:e}:\n	${4:raise $3}\nelse:\n	$5\nfinally:\n	$0" "Try/Except/Else/Finally" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/try" nil nil)
                       ("testcase" "class ${1:ExampleCase}(unittest.TestCase):\n\n	def test_${2:description}(self):\n		$0" "testcase" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/testcase" nil nil)
                       ("test" "def test_${1:description}(${2:}):\n	$0" "test" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/test" nil nil)
                       ("rpdb" "import rpdb; rpdb.set_trace()" "rpdb" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/rpdb" nil nil)
                       ("pudb" "import pudb; pudb.set_trace()" "pudb" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/pudb" nil nil)
                       ("ptpython" "from ptpython.repl import embed\nembed(globals(), locals(), vi_mode=${1:False}, history_filename=${2:None})" "ptpython" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/ptpython" nil nil)
                       ("property" "def ${1:foo}():\n	doc = \"${2:The $1 property.}\"\n	def fget(self):\n		${3:return self._$1}\n	def fset(self, value):\n		${4:self._$1 = value}\n	def fdel(self):\n		${0:del self._$1}\n	return locals()\n$1 = property(**$1())" "property" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/property" nil nil)
                       ("pprint" "import pprint; pprint.pprint($1)" "pprint" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/pprint" nil nil)
                       ("pdbbb" "import pdbpp; pdbpp.set_trace()" "pdbbb" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/pdbbb" nil nil)
                       ("pdb" "import pdb; pdb.set_trace()" "pdb" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/pdb" nil nil)
                       ("lw" "logger.warning(${0:msg})" "lw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/lw" nil nil)
                       ("lkwg" "${1:var_name} = kwargs.get('$1', ${2:None})" "lkwg" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/lkwg" nil nil)
                       ("li" "logger.info(${0:msg})" "li" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/li" nil nil)
                       ("lg" "logger.debug(${0:msg})" "lg" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/lg" nil nil)
                       ("le" "logger.error(${0:msg})" "le" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/le" nil nil)
                       ("ld" "${1:var} = lambda ${2:vars} : ${0:action}" "ld" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/ld" nil nil)
                       ("lc" "logger.critical(${0:msg})" "lc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/lc" nil nil)
                       ("kwg" "self.${1:var_name} = kwargs.get('$1', ${2:None})" "kwg" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/kwg" nil nil)
                       ("kwargs" "**kwargs${1:,}$0" "kwargs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/kwargs" nil nil)
                       ("ipdb" "import ipdb; ipdb.set_trace()" "ipdb" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/ipdb" nil nil)
                       ("imp" "import ${0:module}" "imp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/imp" nil nil)
                       ("ifmain" "if __name__ == '__main__':\n	${0:main()}" "ifmain" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/ifmain" nil nil)
                       ("if" "if ${1:condition}:\n	$0" "if" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/if" nil nil)
                       ("iem" "import IPython; IPython.embed()" "iem" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/iem" nil nil)
                       ("glog" "import logging\nlogger = logging.getLogger(${0:__name__})" "glog" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/glog" nil nil)
                       ("getopt" "try:\n	# Short option syntax: \"hv:\"\n	# Long option syntax: \"help\" or \"verbose=\"\n	opts, args = getopt.getopt(sys.argv[1:], \"${1:short_options}\", [${2:long_options}])\n\nexcept getopt.GetoptError, err:\n	# Print debug info\n	print str(err)\n	${3:error_action}\n\nfor option, argument in opts:\n	if option in (\"-h\", \"--help\"):\n		$0\n	elif option in (\"-v\", \"--verbose\"):\n		verbose = argument" "getopt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/getopt" nil nil)
                       ("fut" "from __future__ import $0" "fut" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/fut" nil nil)
                       ("from" "from ${1:package} import ${0:module}" "from" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/from" nil nil)
                       ("for" "for ${1:item} in ${2:items}:\n	$0" "for" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/for" nil nil)
                       ("epydoc" "\"\"\"${1:Description}\n\n@param ${2:param}: ${3: Description}\n@type  $2: ${4: Type}\n\n@return: ${5: Description}\n@rtype : ${6: Type}\n\n@raise e: ${0: Description}\n\"\"\"" "epydoc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/epydoc" nil nil)
                       ("el" "else:\n	$0" "el" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/el" nil nil)
                       ("ei" "elif ${1:condition}:\n	$0" "ei" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/ei" nil nil)
                       ("dowh" "while True:\n	$1\n	if ${0:condition}:\n		break" "dowh" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/dowh" nil nil)
                       ("dol" "def ${1:__init__}(self, *args, **kwargs):\n    super(${0:ClassName}, self).$1(*args, **kwargs)" "dol" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/dol" nil nil)
                       ("docs" "\"\"\"\nFile: ${1:`(file-name-nondirectory (buffer-file-name))`}\nAuthor: `\"Name\"`\nEmail: `\"Email\"`\nGithub: `\"Github user\"`\nDescription: $0\n\"\"\"\n" "docs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/docs" nil nil)
                       ("defm" "def ${1:mname}(self, ${2:arg}):\n	$0" "defm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/defm" nil nil)
                       ("deff" "def ${1:fname}(${2:}):\n	$0" "deff" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/deff" nil nil)
                       ("def" "def ${1:fname}(${2:}):\n	\"\"\"${3:docstring for $1}\"\"\"\n	$0" "def" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/def" nil nil)
                       ("cutf8" "# -*- coding: utf-8 -*-" "cutf8" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/cutf8" nil nil)
                       ("clatin1" "# -*- coding: latin-1 -*-" "clatin1" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/clatin1" nil nil)
                       ("cl" "class ${1:ClassName}(${2:object}):\n	\"\"\"${3:docstring for $1}\"\"\"\n	def __init__(self, ${4:arg}):\n		${5:super($1, self).__init__()}\n		self.$4 = $4\n		$0" "cl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/cl" nil nil)
                       ("cascii" "# -*- coding: ascii -*-" "cascii" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/cascii" nil nil)
                       ("args" "*args${1:,}$0" "args" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/args" nil nil)
                       ("akw" "*args, **kwargs${1:,}$0" "akw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/akw" nil nil)
                       ("a=" "self.assertEqual($0, $1)" "a=" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/a=" nil nil)
                       ("\"" "\"\"\"${0:doc}\n\"\"\"" "\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/_" nil nil)
                       ("#!3" "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-" "#!3" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/#!3" nil nil)
                       ("#!" "#!/usr/bin/env python\n# -*- coding: utf-8 -*-" "#!" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/python-mode/#!" nil nil)))


;;; Do not edit! File generated at Sun Oct 25 17:07:31 2015
