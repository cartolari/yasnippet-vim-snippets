;;; Compiled snippets and support files for `rails-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'rails-mode
                     '(("xput" "xhr :put, :${1:update}, id: ${2:1}, ${3:object}: ${4:object}" "xput" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/xput" nil nil)
                       ("xpost" "xhr :post, :${1:create}, ${2:object}: ${3:object}" "xpost" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/xpost" nil nil)
                       ("xget" "xhr :get, :${1:show}, id: ${2:1}" "xget" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/xget" nil nil)
                       ("xdelete" "xhr :delete, :${1:destroy}, id: ${2:1}" "xdelete" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/xdelete" nil nil)
                       ("wf" "where(${1:field}: ${0:value})" "wf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/wf" nil nil)
                       ("wc" "where(${1:'conditions'}${0:, bind_var})" "wc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/wc" nil nil)
                       ("vu" "validates :${0:attribute}, uniqueness: true" "vu" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/vu" nil nil)
                       ("vp" "validates :${0:attribute}, presence: true" "vp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/vp" nil nil)
                       ("vn" "validates :${0:attribute}, numericality: true" "vn" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/vn" nil nil)
                       ("vl" "validates :${1:attribute}, length: { in: ${2:3}..${0:20} }" "vl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/vl" nil nil)
                       ("vi" "validates :${1:attribute}, inclusion: { in: %w(${0: mov avi }) }" "vi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/vi" nil nil)
                       ("vf" "validates :${1:attribute}, format: { with: /${0:regex}/ }" "vf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/vf" nil nil)
                       ("ve" "validates :${1:attribute}, exclusion: { in: ${0:%w( mov avi )} }" "ve" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ve" nil nil)
                       ("vc" "validates :${0:attribute}, confirmation: true" "vc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/vc" nil nil)
                       ("va" "validates :${0:terms}, acceptance: true" "validates .., acceptance: true" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/va" nil nil)
                       ("tref" "t.references :${0:model}" "tref" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tref" nil nil)
                       ("tre" "t.rename :${1:old_column_name}, :${2:new_column_name}\n$0" "tre" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tre" nil nil)
                       ("trc" "t.remove :${0:column}" "trc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/trc" nil nil)
                       ("test" "test '${1:should do something}' do\n  $0\nend" "test" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/test" nil nil)
                       ("tctss" "t.timestamps\n$0" "tctss" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tctss" nil nil)
                       ("tcts" "t.timestamp :${1:title}\n$0" "tcts" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcts" nil nil)
                       ("tcti" "t.time :${1:title}\n$0" "tcti" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcti" nil nil)
                       ("tct" "t.text :${1:title}\n$0" "tct" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tct" nil nil)
                       ("tcs" "t.string :${1:title}\n$0" "tcs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcs" nil nil)
                       ("tcr" "t.references :${1:taggable}, polymorphic: { default: '${2:Photo}' }\n$0" "tcr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcr" nil nil)
                       ("tcl" "t.integer :lock_version, null: false, default: 0\n$0" "tcl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcl" nil nil)
                       ("tci" "t.integer :${1:title}\n$0" "tci" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tci" nil nil)
                       ("tch" "t.change :${1:name}, :${2:string}, ${3:limit}: ${4:80}\n$0" "tch" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tch" nil nil)
                       ("tcf" "t.float :${1:title}\n$0" "tcf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcf" nil nil)
                       ("tcdt" "t.datetime :${1:title}\n$0" "tcdt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcdt" nil nil)
                       ("tcda" "t.date :${1:title}\n$0" "tcda" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcda" nil nil)
                       ("tcd" "t.decimal :${1:title}, precision: ${2:10}, scale: ${3:2}\n$0" "tcd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcd" nil nil)
                       ("tcbi" "t.binary :${1:title}, limit: ${2:2}.megabytes\n$0" "tcbi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcbi" nil nil)
                       ("tcb" "t.boolean :${1:title}\n$0" "tcb" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/tcb" nil nil)
                       ("sweeper" "class ${1:ModelClassName}Sweeper < ActionController::Caching::Sweeper\n  observe $1\n\n  def after_save(${0:model_class_name})\n  	expire_cache($2)\n  end\n\n  def after_destroy($2)\n  	expire_cache($2)\n  end\n\n  def expire_cache($2)\n  	expire_page\n  end\nend" "sweeper" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/sweeper" nil nil)
                       ("super_call" "${1:super_class}.instance_method(:${0:method}).bind(self).call" "super_call" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/super_call" nil nil)
                       ("sl" "scope :${1:name}, lambda do |${2:value}|\n  where('${3:field = ?}', ${0:value})\nend" "sl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/sl" nil nil)
                       ("sha1" "Digest::SHA1.hexdigest(${0:string})" "sha1" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/sha1" nil nil)
                       ("sc" "scope :${1:name}, -> { where(${2:field}: ${0:value}) }" "sc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/sc" nil nil)
                       ("rxml" "render xml: '${0:text to render}'" "rxml" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rxml" nil nil)
                       ("ru" "render :update do |${1:page}|\n  $1.$0\nend" "ru" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ru" nil nil)
                       ("rts" "render text: '${1:text to render}', status: ${0:401}" "rts" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rts" nil nil)
                       ("rtlt" "render text: '${1:text to render}', layout: ${0:true}" "rtlt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rtlt" nil nil)
                       ("rtl" "render text: '${1:text to render}', layout: '${0:layoutname}'" "rtl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rtl" nil nil)
                       ("rt" "render text: '${0:text to render}'" "rt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rt" nil nil)
                       ("rps" "render partial: '${1:item}', status: ${0:500}" "rps" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rps" nil nil)
                       ("rpo" "render partial: '${1:item}', object: ${0:@$1}" "rpo" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rpo" nil nil)
                       ("rpl" "render partial: '${1:item}', locals: { ${2:$1}: ${0:@$1} }" "rpl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rpl" nil nil)
                       ("rpc" "render partial: '${1:item}', collection: ${0:@$1s}" "rpc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rpc" nil nil)
                       ("rp" "render partial: '${0:item}'" "rp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rp" nil nil)
                       ("rns" "render nothing: ${1:true}, status: ${0:401}" "rns" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rns" nil nil)
                       ("rn" "render nothing: ${0:true}" "rn" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rn" nil nil)
                       ("rl" "render layout: '${0:layoutname}'" "rl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rl" nil nil)
                       ("rjson" "render json: '${0:text to render}'" "rjson" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rjson" nil nil)
                       ("rit" "render inline: \"${1:<%= 'hello' %>}\", type: ${0::rxml}" "rit" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rit" nil nil)
                       ("ril" "render inline: \"${1:<%= 'hello' %>}\", locals: { ${2:name}: '${3:value}'$0 }" "ril" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ril" nil nil)
                       ("ri" "render inline: \"${0:<%= 'hello' %>}\"" "ri" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ri" nil nil)
                       ("rfu" "render file: '${1:filepath}', use_full_path: ${0:false}" "rfu" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rfu" nil nil)
                       ("rf" "render file: '${0:filepath}'" "rf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rf" nil nil)
                       ("rest" "respond_to do |format|\n  format.${1:html} { $0 }\nend" "rest" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/rest" nil nil)
                       ("ral" "render action: '${1:action}', layout: '${0:layoutname}'" "ral" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ral" nil nil)
                       ("ra" "render action: '${0:action}'" "ra" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ra" nil nil)
                       ("pa" "params[:${1:id}]" "pa" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/pa" nil nil)
                       ("od" "order('${0:field} DESC')" "od" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/od" nil nil)
                       ("oa" "order('${0:field}')" "oa" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/oa" nil nil)
                       ("mrw" "mattr_accessor :${0:attr_names}" "mrw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mrw" nil nil)
                       ("mrnc" "rename_column :${1:table_name}, :${2:old_column_name}, :${0:new_column_name}" "mrnc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mrnc" nil nil)
                       ("mrc" "remove_column :${1:table_name}, :${0:column_name}" "mrc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mrc" nil nil)
                       ("mp" "map(&:${0:id})" "mp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mp" nil nil)
                       ("mnc" "t.${1:string} :${2:title}${3:, null: false}" "mnc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mnc" nil nil)
                       ("migration" "class  < ActiveRecord::Migration\n  def change\n  	$0\n  end\nend" "class .. < ActiveRecord::Migration .. def change .. end" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/migration" nil nil)
                       ("mct" "create_table :${1:table_name} do |t|\n  $0\nend" "mct" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mct" nil nil)
                       ("mcht" "change_table :${1:table_name} do |t|\n  $0\nend" "mcht" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mcht" nil nil)
                       ("mcc" "change_column :${1:table}, :${2:column}, :${0:type}" "mcc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mcc" nil nil)
                       ("mbv" "before_validation :${0:method}" "mbv" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mbv" nil nil)
                       ("mbu" "before_update :${0:method}" "mbu" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mbu" nil nil)
                       ("mbs" "before_save :${0:method}" "mbs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mbs" nil nil)
                       ("mbd" "before_destroy :${0:method}\n" "mbd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mbd" nil nil)
                       ("mbc" "before_create :${0:method}" "mbc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mbc" nil nil)
                       ("mav" "after_validation :${0:method}" "mav" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mav" nil nil)
                       ("mau" "after_update :${0:method}" "mau" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mau" nil nil)
                       ("mat" "after_touch :${0:method}" "mat" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mat" nil nil)
                       ("mas" "after_save :${0:method}" "mas" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mas" nil nil)
                       ("maru" "around_update :${0:method}" "maru" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/maru" nil nil)
                       ("mars" "around_save :${0:method}" "mars" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mars" nil nil)
                       ("mard" "around_destroy :${0:method}\n" "mard" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mard" nil nil)
                       ("marc" "around_create :${0:method}" "marc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/marc" nil nil)
                       ("mapwo" "${1:map}.with_options ${2:controller}: '${3:thing}' do |$3|\n  $0\nend\n\n" "mapwo" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mapwo" nil nil)
                       ("maprs" "${1:map}.resources :${0:resource}" "maprs" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/maprs" nil nil)
                       ("mapr" "${1:map}.resource :${0:resource}" "mapr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mapr" nil nil)
                       ("mapca" "${1:map}.catch_all '*${2:anything}', controller: '${3:default}', action: '${4:error}'" "mapca" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mapca" nil nil)
                       ("mapc" "${1:map}.${2:connect} '${0:controller/:action/:id}'" "mapc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mapc" nil nil)
                       ("mai" "add_index :${1:table_name}, :${0:column_name}" "mai" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mai" nil nil)
                       ("maf" "after_find :${0:method}" "maf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/maf" nil nil)
                       ("mad" "after_destroy :${0:method}\n" "mad" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mad" nil nil)
                       ("macr" "after_create :${0:method}" "macr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/macr" nil nil)
                       ("mac" "add_column :${1:table_name}, :${2:column_name}, :${0:data_type}" "mac" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/mac" nil nil)
                       ("logw" "logger.warn { '${1:message}' }" "logw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/logw" nil nil)
                       ("logi" "logger.info { '${1:message}' }" "logi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/logi" nil nil)
                       ("logf" "logger.fatal { '${1:message}' }" "logf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/logf" nil nil)
                       ("loge" "logger.error { '${1:message}' }" "loge" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/loge" nil nil)
                       ("logd" "logger.debug { '${1:message}' }" "logd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/logd" nil nil)
                       ("log2" "RAILS_DEFAULT_LOGGER.${1:debug} $0" "log2" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/log2" nil nil)
                       ("log" "Rails.logger.${1:debug} $0" "log" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/log" nil nil)
                       ("isvu" "it { should validate_uniqueness_of :$0 }" "isvu" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isvu" nil nil)
                       ("isvp" "it { should validate_presence_of :$0 }" "isvp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isvp" nil nil)
                       ("isvn" "it { should validate_numericality_of :$0 }" "isvn" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isvn" nil nil)
                       ("isvc" "it { should validate_confirmation_of :$0 }" "isvc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isvc" nil nil)
                       ("isva" "it { should validate_acceptance_of :$0 }" "isva" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isva" nil nil)
                       ("ist" "<%= image_submit_tag('${1:agree.png}', id: '${2:id}'$0) %>" "ist" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ist" nil nil)
                       ("isss" "it { should set_session :${0:key} }" "isss" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isss" nil nil)
                       ("issf" "it { should set_the_flash('$0') }" "issf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/issf" nil nil)
                       ("iss" "it { should serialize :$0 }" "iss" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/iss" nil nil)
                       ("isrwl" "it { should render_with_layout $0 }" "isrwl" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isrwl" nil nil)
                       ("isrw" "it { should respond_with ${0:status} }" "isrw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isrw" nil nil)
                       ("isrtp" "it { should render_template $0 }" "isrtp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isrtp" nil nil)
                       ("isrt" "it { should redirect_to ${0:url} }" "isrt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isrt" nil nil)
                       ("isrf" "it { should rescue_from ${0:exception} }" "isrf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isrf" nil nil)
                       ("isresw" "it { should respond_to(:$1).with($0).arguments }" "isresw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isresw" nil nil)
                       ("isres" "it { should respond_to :$0 }" "isres" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isres" nil nil)
                       ("isr" "it { should route(:${1:method}, '${0:path}') }" "isr" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isr" nil nil)
                       ("ishro" "it { should have_readonly_attribute :$0 }" "ishro" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ishro" nil nil)
                       ("isho" "it { should have_one :$0 }" "isho" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isho" nil nil)
                       ("ishmt" "it { should have_many(:$1).through :$0 }" "ishmt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ishmt" nil nil)
                       ("ishm" "it { should have_many :$0 }" "ishm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ishm" nil nil)
                       ("ishi" "it { should have_db_index :$0 }" "ishi" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ishi" nil nil)
                       ("ishc" "it { should have_db_column :$0 }" "ishc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ishc" nil nil)
                       ("ishbtm" "it { should have_and_belong_to_many :$0 }" "ishbtm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ishbtm" nil nil)
                       ("isfp" "it { should filter_param :${0:key} }" "isfp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isfp" nil nil)
                       ("isel" "it { should ensure_length_of :$0 }" "isel" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isel" nil nil)
                       ("isei" "it { should ensure_inclusion_of :$0 }" "isei" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isei" nil nil)
                       ("isee" "it { should ensure_exclusion_of :$0 }" "isee" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isee" nil nil)
                       ("isbv" "it { should be_valid }" "isbv" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isbv" nil nil)
                       ("isbtcc" "it { should belong_to(:$1).counter_cache ${0:true} }" "isbtcc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isbtcc" nil nil)
                       ("isbt" "it { should belong_to :$0 }" "isbt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isbt" nil nil)
                       ("isav" "it { should allow_value($1).for :$0 }" "isav" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isav" nil nil)
                       ("isana" "it { should accept_nested_attributes_for :$0 }" "isana" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isana" nil nil)
                       ("isama" "it { should allow_mass_assignment_of :$0 }" "isama" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/isama" nil nil)
                       ("i18" "I18n.t('${1:type.key}')" "i18" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/i18" nil nil)
                       ("hod" "has_one :${1:object}, dependent: :${0:destroy}" "hod" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/hod" nil nil)
                       ("ho" "has_one :${0:object}" "ho" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ho" nil nil)
                       ("hmt" "has_many :${1:object}, through: :${0:object}" "hmt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/hmt" nil nil)
                       ("hmd" "has_many :${1:other}s, class_name: '${2:$1}', foreign_key: '${3:$1}_id', dependent: :destroy" "hmd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/hmd" nil nil)
                       ("hm" "has_many :${0:object}" "hm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/hm" nil nil)
                       ("habtm" "has_and_belongs_to_many :${1:object}, join_table: '${2:table_name}', foreign_key: '$3_id'" "habtm" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/habtm" nil nil)
                       ("format" "format.${1:js|xml|html} { $0 }" "format" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/format" nil nil)
                       ("flash" "flash[:${1:notice}] = '$0'" "flash" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/flash" nil nil)
                       ("dele" "delegate :${1:methods}, to: :${2:object}, prefix: :${3:prefix}, allow_nil: ${0:allow_nil}" "delegate .. to .. prefix .. allow_nil" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/dele" nil nil)
                       ("defupdate" "def update\n  @${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\n\n  respond_to do |format|\n  	if @$1.update($1_params)\n  		flash[:notice] = '$2 was successfully updated.'\n  		format.html { redirect_to(@$1) }\n  		format.xml  { head :ok }\n  	else\n  		format.html { render action: 'edit' }\n  		format.xml  { render xml: @$1.errors, status: :unprocessable_entity }\n  	end\n  end\nend" "defupdate" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/defupdate" nil nil)
                       ("defshow" "def show\n  @${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\n\n  respond_to do |format|\n  	format.html # show.html.erb\n  	format.xml  { render xml: @$1 }\n  end\nend" "defshow" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/defshow" nil nil)
                       ("defparams" "def ${1:model_class_name}_params\n  params.require(:$1).permit()\nend" "defparams" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/defparams" nil nil)
                       ("defnew" "def new\n  @${1:model_class_name} = ${2:ModelClassName}.new\n\n  respond_to do |format|\n  	format.html # new.html.erb\n  	format.xml  { render xml: @$1 }\n  end\nend" "defnew" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/defnew" nil nil)
                       ("defindex" "def index\n  @${1:model_class_name} = ${2:ModelClassName}.all\n\n  respond_to do |format|\n  	format.html # index.html.erb\n  	format.xml  { render xml: @$1s }\n  end\nend" "defindex" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/defindex" nil nil)
                       ("defedit" "def edit\n  @${1:model_class_name} = ${0:ModelClassName}.find(params[:id])\nend" "defedit" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/defedit" nil nil)
                       ("defdestroy" "def destroy\n  @${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\n  @$1.destroy\n\n  respond_to do |format|\n  	format.html { redirect_to($1s_url) }\n  	format.xml  { head :ok }\n  end\nend" "defdestroy" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/defdestroy" nil nil)
                       ("defcreate" "def create\n  @${1:model_class_name} = ${2:ModelClassName}.new($1_params)\n\n  respond_to do |format|\n  	if @$1.save\n  		flash[:notice] = '$2 was successfully created.'\n  		format.html { redirect_to(@$1) }\n  		format.xml  { render xml: @$1, status: :created, location: @$1 }\n  	else\n  		format.html { render action: 'new' }\n  		format.xml  { render xml: @$1.errors, status: :unprocessable_entity }\n  	end\n  end\nend" "defcreate" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/defcreate" nil nil)
                       ("crw" "cattr_accessor :${0:attr_names}" "crw" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/crw" nil nil)
                       ("btp" "belongs_to :${1:association}, polymorphic: true" "btp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/btp" nil nil)
                       ("bt" "belongs_to :${0:association}" "bt" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/bt" nil nil)
                       ("bf" "before_filter :${0:method}" "bf" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/bf" nil nil)
                       ("ba" "before_action :${0:method}" "ba" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ba" nil nil)
                       ("ass" "assert_select '${1:path}', ${2:text}: '${3:inner_html}' ${4:do}\n  $0\nend" "assert_select(..)" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/ass" nil nil)
                       ("asrj" "assert_rjs :${1:replace}, '${0:dom id}'" "asrj" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/asrj" nil nil)
                       ("asre" "assert_response :${1:success}, @response.body" "asre" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/asre" nil nil)
                       ("asnd" "assert_no_difference '${1:Model}.${2:count}' do\n  $0\nend" "asnd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/asnd" nil nil)
                       ("asd" "assert_difference '${1:Model}.${2:count}', ${3:1} do\n  $0\nend" "asd" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/asd" nil nil)
                       ("artpp" "assert_redirected_to ${0:model}s_path" "artpp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/artpp" nil nil)
                       ("artp" "assert_redirected_to ${1:model}_path(${0:@$1})" "artp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/artp" nil nil)
                       ("artnpp" "assert_redirected_to ${1:parent}_${2:child}_path(${0:@$1})" "artnpp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/artnpp" nil nil)
                       ("artnp" "assert_redirected_to ${1:parent}_${2:child}_path(${3:@$1}, ${0:@$2})" "artnp" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/artnp" nil nil)
                       ("art" "assert_redirected_to ${1:action}: '${2:index}'" "art" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/art" nil nil)
                       ("amc" "alias_method_chain :${1:method_name}, :${0:feature}" "amc" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rails-mode/amc" nil nil)))


;;; Do not edit! File generated at Mon May  8 02:40:52 2017
