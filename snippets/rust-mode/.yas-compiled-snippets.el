;;; Compiled snippets and support files for `rust-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'rust-mode
                     '(("wh" "while ${1:condition} {\n	$0\n}" "\"while loop\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/wh" nil nil)
                       ("type" "type ${1:NewName} = $2;" "\"Type alias\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/type" nil nil)
                       ("trait" "trait ${1:Name} {\n	$0\n}" "\"Trait definition\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/trait" nil nil)
                       ("todo" "// [TODO]: ${0:Description}" "\"TODO comment\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/todo" nil nil)
                       ("testmod" "#[cfg(test)]\nmod tests {\n	use super::${1:*};\n\n	test$0\n}" "\"Test module\" b" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/testmod" nil nil)
                       ("test" "#[test]\nfn ${1:test_function_name}() {\n	$0\n}" "\"Unit test function\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/test" nil nil)
                       ("stn" "pub struct ${1:`(s-replace \" \" \"\" (s-titleized-words (file-name-base (or (buffer-file-name) \"\"))))`} {\n	$0\n}\n\nimpl $1 {\n	pub fn new($2) -> $1 {\n		$1 { $3 };\n	}\n}" "\"Struct with new constructor\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/stn" nil nil)
                       ("stat" "static $1: ${2:usize} = $0;" "\"static item declaration\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/stat" nil nil)
                       ("st" "struct ${1:`(s-replace \" \" \"\" (s-titleized-words (file-name-base (or (buffer-file-name) \"\"))))`} {\n	$0\n}" "\"Struct definition\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/st" nil nil)
                       ("ss" "static $1: &'static str = \"$0\";" "\"static string declaration\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/ss" nil nil)
                       ("spawn" "thread::spawn(${1:move }|| {\n	$0\n});" "\"spawn a thread\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/spawn" nil nil)
                       ("scoped" "thread::scoped(${1:move }|| {\n	$0\n});" "\"spawn a scoped thread\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/scoped" nil nil)
                       ("res" "Result<${1:~str}, ${2:()}>" "\"Result<T, E>\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/res" nil nil)
                       ("pln," "println!(\"$1\", $2);" "\"println! with format param\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/pln," nil nil)
                       ("pln" "println!(\"$1\");" "\"println!\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/pln" nil nil)
                       ("pfn" "pub fn ${1:function_name}($2)$3 {\n	$0\n}" "\"Function definition\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/pfn" nil nil)
                       ("opt" "Option<${1:i32}>" "\"Option<T>\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/opt" nil nil)
                       ("new" "pub fn new($2) -> ${1:Name} {\n	$1 { $3 };\n}" "\"Constructor function\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/new" nil nil)
                       ("mod" "mod ${1:`(s-replace \" \" \"\" (s-titleized-words (file-name-base (or (buffer-file-name) \"\"))))`} {\n	$0\n} /* $1 */" "mod" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/mod" nil nil)
                       ("mat" "match $1 {\n	$2 => $3\n}" "\"match pattern\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/mat" nil nil)
                       ("main" "pub fn main() {\n	$0\n}" "\"Main function\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/main" nil nil)
                       ("loop" "loop {\n	$0\n}" "\"loop {}\" b" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/loop" nil nil)
                       ("letm" "let mut ${1:name}${2:: ${3:type}} = $4;" "\"let mut variable declaration\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/letm" nil nil)
                       ("let" "let ${1:name}${2:: ${3:type}} = $4;" "\"let variable declaration\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/let" nil nil)
                       ("impl" "impl ${1:Type/Trait}${2: for ${3:Type}} {\n	$0\n}" "\"Struct/Trait implementation\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/impl" nil nil)
                       ("ife" "if $1 {\n	$2\n} else {\n	$0\n}" "\"if / else\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/ife" nil nil)
                       ("if" "if $1 {\n	$0\n}" "if" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/if" nil nil)
                       ("for" "for ${1:i} in $2 {\n	$0\n}" "\"for ... in ... loop\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/for" nil nil)
                       ("fn" "fn ${1:function_name}($2)$3 {\n	$0\n}" "\"Function definition\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/fn" nil nil)
                       ("fixme" "// FIXME: $0" "\"FIXME comment\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/fixme" nil nil)
                       ("feat" "#![feature(${1:plugin})]" "\"feature attribute\" b" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/feat" nil nil)
                       ("enum" "enum ${1:Name} {\n	$2,\n}" "\"enum definition\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/enum" nil nil)
                       ("eli" "else if $1 {\n	$0\n}" "\"else if\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/eli" nil nil)
                       ("el" "else {\n	$0\n}" "\"else\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/el" nil nil)
                       ("ecl" "#[macro_use]\nextern crate log;" "\"extern crate log\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/ecl" nil nil)
                       ("ec" "extern crate ${1:sync};" "\"extern crate\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/ec" nil nil)
                       ("drop" "impl Drop for ${1:Name} {\n	fn drop(&mut self) {\n		$0\n	}\n}" "\"Drop trait implementation (destructor)\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/drop" nil nil)
                       ("der" "#[derive(${1:Debug})]" "\"#[derive(..)]\" b" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/der" nil nil)
                       ("crate" "// Crate name\n#![crate_name = \"${1:crate_name}\"]\n// Additional metadata attributes\n#![desc = \"${2:Descrption.}\"]\n#![license = \"${3:BSD}\"]\n#![comment = \"${4:Comment.}\"]\n// Specify the output type\n#![crate_type = \"${5:lib}\"]" "\"Define create meta attributes\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/crate" nil nil)
                       ("chan" "let (${1:tx}, ${2:rx}): (Sender<${3:i32}>, Receiver<${4:i32}>) = channel();" "\"Declare (Sender, Receiver) pair of asynchronous channel()\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/chan" nil nil)
                       ("cfg" "#[cfg(${1:target_os = \"linux\"})]" "\"cfg attribute\" b" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/cfg" nil nil)
                       ("case" "${1:_} => ${2:expression}" "\"Case clause of pattern match\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/case" nil nil)
                       ("bench" "#[bench]\nfn ${1:bench_function_name}(b: &mut test::Bencher) {\n	b.iter(|| {\n		$0\n	})\n}" "\"Bench function\" b" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/bench" nil nil)
                       ("attr" "#[${1:inline}]" "\"#[..]\" b" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/attr" nil nil)
                       ("ase" "assert_eq!(${1:expected}, ${2:actual})" "\"assert_eq!\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/ase" nil nil)
                       ("as" "assert!(${1:predicate})" "\"assert!\"" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/as" nil nil)
                       ("allow" "#[allow(${1:unused_variable})]" "\"allow lint attribute\" b" nil nil nil "/home/bruno/code/yasnippet-vim-snippets/snippets/rust-mode/allow" nil nil)))


;;; Do not edit! File generated at Sun Oct 25 17:07:31 2015
